
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model FinancialData
 * 
 */
export type FinancialData = $Result.DefaultSelection<Prisma.$FinancialDataPayload>
/**
 * Model HistoricalData
 * 
 */
export type HistoricalData = $Result.DefaultSelection<Prisma.$HistoricalDataPayload>
/**
 * Model FinancialDecision
 * 
 */
export type FinancialDecision = $Result.DefaultSelection<Prisma.$FinancialDecisionPayload>
/**
 * Model ScenarioConfig
 * 
 */
export type ScenarioConfig = $Result.DefaultSelection<Prisma.$ScenarioConfigPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.financialData`: Exposes CRUD operations for the **FinancialData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FinancialData
    * const financialData = await prisma.financialData.findMany()
    * ```
    */
  get financialData(): Prisma.FinancialDataDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.historicalData`: Exposes CRUD operations for the **HistoricalData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HistoricalData
    * const historicalData = await prisma.historicalData.findMany()
    * ```
    */
  get historicalData(): Prisma.HistoricalDataDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.financialDecision`: Exposes CRUD operations for the **FinancialDecision** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FinancialDecisions
    * const financialDecisions = await prisma.financialDecision.findMany()
    * ```
    */
  get financialDecision(): Prisma.FinancialDecisionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.scenarioConfig`: Exposes CRUD operations for the **ScenarioConfig** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ScenarioConfigs
    * const scenarioConfigs = await prisma.scenarioConfig.findMany()
    * ```
    */
  get scenarioConfig(): Prisma.ScenarioConfigDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    FinancialData: 'FinancialData',
    HistoricalData: 'HistoricalData',
    FinancialDecision: 'FinancialDecision',
    ScenarioConfig: 'ScenarioConfig'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "user" | "financialData" | "historicalData" | "financialDecision" | "scenarioConfig"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      FinancialData: {
        payload: Prisma.$FinancialDataPayload<ExtArgs>
        fields: Prisma.FinancialDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FinancialDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FinancialDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDataPayload>
          }
          findFirst: {
            args: Prisma.FinancialDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FinancialDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDataPayload>
          }
          findMany: {
            args: Prisma.FinancialDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDataPayload>[]
          }
          create: {
            args: Prisma.FinancialDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDataPayload>
          }
          createMany: {
            args: Prisma.FinancialDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FinancialDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDataPayload>[]
          }
          delete: {
            args: Prisma.FinancialDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDataPayload>
          }
          update: {
            args: Prisma.FinancialDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDataPayload>
          }
          deleteMany: {
            args: Prisma.FinancialDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FinancialDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FinancialDataUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDataPayload>[]
          }
          upsert: {
            args: Prisma.FinancialDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDataPayload>
          }
          aggregate: {
            args: Prisma.FinancialDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFinancialData>
          }
          groupBy: {
            args: Prisma.FinancialDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<FinancialDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.FinancialDataCountArgs<ExtArgs>
            result: $Utils.Optional<FinancialDataCountAggregateOutputType> | number
          }
        }
      }
      HistoricalData: {
        payload: Prisma.$HistoricalDataPayload<ExtArgs>
        fields: Prisma.HistoricalDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HistoricalDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricalDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HistoricalDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricalDataPayload>
          }
          findFirst: {
            args: Prisma.HistoricalDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricalDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HistoricalDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricalDataPayload>
          }
          findMany: {
            args: Prisma.HistoricalDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricalDataPayload>[]
          }
          create: {
            args: Prisma.HistoricalDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricalDataPayload>
          }
          createMany: {
            args: Prisma.HistoricalDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HistoricalDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricalDataPayload>[]
          }
          delete: {
            args: Prisma.HistoricalDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricalDataPayload>
          }
          update: {
            args: Prisma.HistoricalDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricalDataPayload>
          }
          deleteMany: {
            args: Prisma.HistoricalDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HistoricalDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HistoricalDataUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricalDataPayload>[]
          }
          upsert: {
            args: Prisma.HistoricalDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HistoricalDataPayload>
          }
          aggregate: {
            args: Prisma.HistoricalDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHistoricalData>
          }
          groupBy: {
            args: Prisma.HistoricalDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<HistoricalDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.HistoricalDataCountArgs<ExtArgs>
            result: $Utils.Optional<HistoricalDataCountAggregateOutputType> | number
          }
        }
      }
      FinancialDecision: {
        payload: Prisma.$FinancialDecisionPayload<ExtArgs>
        fields: Prisma.FinancialDecisionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FinancialDecisionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDecisionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FinancialDecisionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDecisionPayload>
          }
          findFirst: {
            args: Prisma.FinancialDecisionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDecisionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FinancialDecisionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDecisionPayload>
          }
          findMany: {
            args: Prisma.FinancialDecisionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDecisionPayload>[]
          }
          create: {
            args: Prisma.FinancialDecisionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDecisionPayload>
          }
          createMany: {
            args: Prisma.FinancialDecisionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FinancialDecisionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDecisionPayload>[]
          }
          delete: {
            args: Prisma.FinancialDecisionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDecisionPayload>
          }
          update: {
            args: Prisma.FinancialDecisionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDecisionPayload>
          }
          deleteMany: {
            args: Prisma.FinancialDecisionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FinancialDecisionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FinancialDecisionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDecisionPayload>[]
          }
          upsert: {
            args: Prisma.FinancialDecisionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FinancialDecisionPayload>
          }
          aggregate: {
            args: Prisma.FinancialDecisionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFinancialDecision>
          }
          groupBy: {
            args: Prisma.FinancialDecisionGroupByArgs<ExtArgs>
            result: $Utils.Optional<FinancialDecisionGroupByOutputType>[]
          }
          count: {
            args: Prisma.FinancialDecisionCountArgs<ExtArgs>
            result: $Utils.Optional<FinancialDecisionCountAggregateOutputType> | number
          }
        }
      }
      ScenarioConfig: {
        payload: Prisma.$ScenarioConfigPayload<ExtArgs>
        fields: Prisma.ScenarioConfigFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ScenarioConfigFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenarioConfigPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ScenarioConfigFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenarioConfigPayload>
          }
          findFirst: {
            args: Prisma.ScenarioConfigFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenarioConfigPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ScenarioConfigFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenarioConfigPayload>
          }
          findMany: {
            args: Prisma.ScenarioConfigFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenarioConfigPayload>[]
          }
          create: {
            args: Prisma.ScenarioConfigCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenarioConfigPayload>
          }
          createMany: {
            args: Prisma.ScenarioConfigCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ScenarioConfigCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenarioConfigPayload>[]
          }
          delete: {
            args: Prisma.ScenarioConfigDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenarioConfigPayload>
          }
          update: {
            args: Prisma.ScenarioConfigUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenarioConfigPayload>
          }
          deleteMany: {
            args: Prisma.ScenarioConfigDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ScenarioConfigUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ScenarioConfigUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenarioConfigPayload>[]
          }
          upsert: {
            args: Prisma.ScenarioConfigUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ScenarioConfigPayload>
          }
          aggregate: {
            args: Prisma.ScenarioConfigAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateScenarioConfig>
          }
          groupBy: {
            args: Prisma.ScenarioConfigGroupByArgs<ExtArgs>
            result: $Utils.Optional<ScenarioConfigGroupByOutputType>[]
          }
          count: {
            args: Prisma.ScenarioConfigCountArgs<ExtArgs>
            result: $Utils.Optional<ScenarioConfigCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    user?: UserOmit
    financialData?: FinancialDataOmit
    historicalData?: HistoricalDataOmit
    financialDecision?: FinancialDecisionOmit
    scenarioConfig?: ScenarioConfigOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    historicalData: number
    financialDecisions: number
    scenarioConfigs: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    historicalData?: boolean | UserCountOutputTypeCountHistoricalDataArgs
    financialDecisions?: boolean | UserCountOutputTypeCountFinancialDecisionsArgs
    scenarioConfigs?: boolean | UserCountOutputTypeCountScenarioConfigsArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHistoricalDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoricalDataWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFinancialDecisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinancialDecisionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountScenarioConfigsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScenarioConfigWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    email: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    email: number
    name: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    email?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    email: string
    name: string | null
    createdAt: Date
    updatedAt: Date
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    financialData?: boolean | User$financialDataArgs<ExtArgs>
    historicalData?: boolean | User$historicalDataArgs<ExtArgs>
    financialDecisions?: boolean | User$financialDecisionsArgs<ExtArgs>
    scenarioConfigs?: boolean | User$scenarioConfigsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    email?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "email" | "name" | "createdAt" | "updatedAt", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    financialData?: boolean | User$financialDataArgs<ExtArgs>
    historicalData?: boolean | User$historicalDataArgs<ExtArgs>
    financialDecisions?: boolean | User$financialDecisionsArgs<ExtArgs>
    scenarioConfigs?: boolean | User$scenarioConfigsArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      financialData: Prisma.$FinancialDataPayload<ExtArgs> | null
      historicalData: Prisma.$HistoricalDataPayload<ExtArgs>[]
      financialDecisions: Prisma.$FinancialDecisionPayload<ExtArgs>[]
      scenarioConfigs: Prisma.$ScenarioConfigPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      email: string
      name: string | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    financialData<T extends User$financialDataArgs<ExtArgs> = {}>(args?: Subset<T, User$financialDataArgs<ExtArgs>>): Prisma__FinancialDataClient<$Result.GetResult<Prisma.$FinancialDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    historicalData<T extends User$historicalDataArgs<ExtArgs> = {}>(args?: Subset<T, User$historicalDataArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoricalDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    financialDecisions<T extends User$financialDecisionsArgs<ExtArgs> = {}>(args?: Subset<T, User$financialDecisionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialDecisionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    scenarioConfigs<T extends User$scenarioConfigsArgs<ExtArgs> = {}>(args?: Subset<T, User$scenarioConfigsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScenarioConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.financialData
   */
  export type User$financialDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialData
     */
    select?: FinancialDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialData
     */
    omit?: FinancialDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDataInclude<ExtArgs> | null
    where?: FinancialDataWhereInput
  }

  /**
   * User.historicalData
   */
  export type User$historicalDataArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricalData
     */
    select?: HistoricalDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricalData
     */
    omit?: HistoricalDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricalDataInclude<ExtArgs> | null
    where?: HistoricalDataWhereInput
    orderBy?: HistoricalDataOrderByWithRelationInput | HistoricalDataOrderByWithRelationInput[]
    cursor?: HistoricalDataWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoricalDataScalarFieldEnum | HistoricalDataScalarFieldEnum[]
  }

  /**
   * User.financialDecisions
   */
  export type User$financialDecisionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialDecision
     */
    select?: FinancialDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialDecision
     */
    omit?: FinancialDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDecisionInclude<ExtArgs> | null
    where?: FinancialDecisionWhereInput
    orderBy?: FinancialDecisionOrderByWithRelationInput | FinancialDecisionOrderByWithRelationInput[]
    cursor?: FinancialDecisionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FinancialDecisionScalarFieldEnum | FinancialDecisionScalarFieldEnum[]
  }

  /**
   * User.scenarioConfigs
   */
  export type User$scenarioConfigsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScenarioConfig
     */
    select?: ScenarioConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScenarioConfig
     */
    omit?: ScenarioConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScenarioConfigInclude<ExtArgs> | null
    where?: ScenarioConfigWhereInput
    orderBy?: ScenarioConfigOrderByWithRelationInput | ScenarioConfigOrderByWithRelationInput[]
    cursor?: ScenarioConfigWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ScenarioConfigScalarFieldEnum | ScenarioConfigScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model FinancialData
   */

  export type AggregateFinancialData = {
    _count: FinancialDataCountAggregateOutputType | null
    _avg: FinancialDataAvgAggregateOutputType | null
    _sum: FinancialDataSumAggregateOutputType | null
    _min: FinancialDataMinAggregateOutputType | null
    _max: FinancialDataMaxAggregateOutputType | null
  }

  export type FinancialDataAvgAggregateOutputType = {
    monthlySalary: number | null
    freelanceIncome: number | null
    rent: number | null
    utilities: number | null
    groceries: number | null
    subscriptions: number | null
    miscellaneous: number | null
    totalDebt: number | null
    monthlyEMI: number | null
    emergencyFund: number | null
    otherSavings: number | null
    sipMonthly: number | null
    lumpSumInvestment: number | null
    overallScore: number | null
    emergencyFundScore: number | null
    debtRatioScore: number | null
    investmentAllocationScore: number | null
  }

  export type FinancialDataSumAggregateOutputType = {
    monthlySalary: number | null
    freelanceIncome: number | null
    rent: number | null
    utilities: number | null
    groceries: number | null
    subscriptions: number | null
    miscellaneous: number | null
    totalDebt: number | null
    monthlyEMI: number | null
    emergencyFund: number | null
    otherSavings: number | null
    sipMonthly: number | null
    lumpSumInvestment: number | null
    overallScore: number | null
    emergencyFundScore: number | null
    debtRatioScore: number | null
    investmentAllocationScore: number | null
  }

  export type FinancialDataMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    monthlySalary: number | null
    freelanceIncome: number | null
    rent: number | null
    utilities: number | null
    groceries: number | null
    subscriptions: number | null
    miscellaneous: number | null
    totalDebt: number | null
    monthlyEMI: number | null
    emergencyFund: number | null
    otherSavings: number | null
    sipMonthly: number | null
    lumpSumInvestment: number | null
    overallScore: number | null
    emergencyFundScore: number | null
    debtRatioScore: number | null
    investmentAllocationScore: number | null
    userId: string | null
  }

  export type FinancialDataMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    updatedAt: Date | null
    monthlySalary: number | null
    freelanceIncome: number | null
    rent: number | null
    utilities: number | null
    groceries: number | null
    subscriptions: number | null
    miscellaneous: number | null
    totalDebt: number | null
    monthlyEMI: number | null
    emergencyFund: number | null
    otherSavings: number | null
    sipMonthly: number | null
    lumpSumInvestment: number | null
    overallScore: number | null
    emergencyFundScore: number | null
    debtRatioScore: number | null
    investmentAllocationScore: number | null
    userId: string | null
  }

  export type FinancialDataCountAggregateOutputType = {
    id: number
    createdAt: number
    updatedAt: number
    monthlySalary: number
    freelanceIncome: number
    rent: number
    utilities: number
    groceries: number
    subscriptions: number
    miscellaneous: number
    totalDebt: number
    monthlyEMI: number
    emergencyFund: number
    otherSavings: number
    sipMonthly: number
    lumpSumInvestment: number
    overallScore: number
    emergencyFundScore: number
    debtRatioScore: number
    investmentAllocationScore: number
    userId: number
    _all: number
  }


  export type FinancialDataAvgAggregateInputType = {
    monthlySalary?: true
    freelanceIncome?: true
    rent?: true
    utilities?: true
    groceries?: true
    subscriptions?: true
    miscellaneous?: true
    totalDebt?: true
    monthlyEMI?: true
    emergencyFund?: true
    otherSavings?: true
    sipMonthly?: true
    lumpSumInvestment?: true
    overallScore?: true
    emergencyFundScore?: true
    debtRatioScore?: true
    investmentAllocationScore?: true
  }

  export type FinancialDataSumAggregateInputType = {
    monthlySalary?: true
    freelanceIncome?: true
    rent?: true
    utilities?: true
    groceries?: true
    subscriptions?: true
    miscellaneous?: true
    totalDebt?: true
    monthlyEMI?: true
    emergencyFund?: true
    otherSavings?: true
    sipMonthly?: true
    lumpSumInvestment?: true
    overallScore?: true
    emergencyFundScore?: true
    debtRatioScore?: true
    investmentAllocationScore?: true
  }

  export type FinancialDataMinAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    monthlySalary?: true
    freelanceIncome?: true
    rent?: true
    utilities?: true
    groceries?: true
    subscriptions?: true
    miscellaneous?: true
    totalDebt?: true
    monthlyEMI?: true
    emergencyFund?: true
    otherSavings?: true
    sipMonthly?: true
    lumpSumInvestment?: true
    overallScore?: true
    emergencyFundScore?: true
    debtRatioScore?: true
    investmentAllocationScore?: true
    userId?: true
  }

  export type FinancialDataMaxAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    monthlySalary?: true
    freelanceIncome?: true
    rent?: true
    utilities?: true
    groceries?: true
    subscriptions?: true
    miscellaneous?: true
    totalDebt?: true
    monthlyEMI?: true
    emergencyFund?: true
    otherSavings?: true
    sipMonthly?: true
    lumpSumInvestment?: true
    overallScore?: true
    emergencyFundScore?: true
    debtRatioScore?: true
    investmentAllocationScore?: true
    userId?: true
  }

  export type FinancialDataCountAggregateInputType = {
    id?: true
    createdAt?: true
    updatedAt?: true
    monthlySalary?: true
    freelanceIncome?: true
    rent?: true
    utilities?: true
    groceries?: true
    subscriptions?: true
    miscellaneous?: true
    totalDebt?: true
    monthlyEMI?: true
    emergencyFund?: true
    otherSavings?: true
    sipMonthly?: true
    lumpSumInvestment?: true
    overallScore?: true
    emergencyFundScore?: true
    debtRatioScore?: true
    investmentAllocationScore?: true
    userId?: true
    _all?: true
  }

  export type FinancialDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FinancialData to aggregate.
     */
    where?: FinancialDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialData to fetch.
     */
    orderBy?: FinancialDataOrderByWithRelationInput | FinancialDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FinancialDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FinancialData
    **/
    _count?: true | FinancialDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FinancialDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FinancialDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FinancialDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FinancialDataMaxAggregateInputType
  }

  export type GetFinancialDataAggregateType<T extends FinancialDataAggregateArgs> = {
        [P in keyof T & keyof AggregateFinancialData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFinancialData[P]>
      : GetScalarType<T[P], AggregateFinancialData[P]>
  }




  export type FinancialDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinancialDataWhereInput
    orderBy?: FinancialDataOrderByWithAggregationInput | FinancialDataOrderByWithAggregationInput[]
    by: FinancialDataScalarFieldEnum[] | FinancialDataScalarFieldEnum
    having?: FinancialDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FinancialDataCountAggregateInputType | true
    _avg?: FinancialDataAvgAggregateInputType
    _sum?: FinancialDataSumAggregateInputType
    _min?: FinancialDataMinAggregateInputType
    _max?: FinancialDataMaxAggregateInputType
  }

  export type FinancialDataGroupByOutputType = {
    id: string
    createdAt: Date
    updatedAt: Date
    monthlySalary: number
    freelanceIncome: number
    rent: number
    utilities: number
    groceries: number
    subscriptions: number
    miscellaneous: number
    totalDebt: number
    monthlyEMI: number
    emergencyFund: number
    otherSavings: number
    sipMonthly: number
    lumpSumInvestment: number
    overallScore: number | null
    emergencyFundScore: number | null
    debtRatioScore: number | null
    investmentAllocationScore: number | null
    userId: string
    _count: FinancialDataCountAggregateOutputType | null
    _avg: FinancialDataAvgAggregateOutputType | null
    _sum: FinancialDataSumAggregateOutputType | null
    _min: FinancialDataMinAggregateOutputType | null
    _max: FinancialDataMaxAggregateOutputType | null
  }

  type GetFinancialDataGroupByPayload<T extends FinancialDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FinancialDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FinancialDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FinancialDataGroupByOutputType[P]>
            : GetScalarType<T[P], FinancialDataGroupByOutputType[P]>
        }
      >
    >


  export type FinancialDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    monthlySalary?: boolean
    freelanceIncome?: boolean
    rent?: boolean
    utilities?: boolean
    groceries?: boolean
    subscriptions?: boolean
    miscellaneous?: boolean
    totalDebt?: boolean
    monthlyEMI?: boolean
    emergencyFund?: boolean
    otherSavings?: boolean
    sipMonthly?: boolean
    lumpSumInvestment?: boolean
    overallScore?: boolean
    emergencyFundScore?: boolean
    debtRatioScore?: boolean
    investmentAllocationScore?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["financialData"]>

  export type FinancialDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    monthlySalary?: boolean
    freelanceIncome?: boolean
    rent?: boolean
    utilities?: boolean
    groceries?: boolean
    subscriptions?: boolean
    miscellaneous?: boolean
    totalDebt?: boolean
    monthlyEMI?: boolean
    emergencyFund?: boolean
    otherSavings?: boolean
    sipMonthly?: boolean
    lumpSumInvestment?: boolean
    overallScore?: boolean
    emergencyFundScore?: boolean
    debtRatioScore?: boolean
    investmentAllocationScore?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["financialData"]>

  export type FinancialDataSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    monthlySalary?: boolean
    freelanceIncome?: boolean
    rent?: boolean
    utilities?: boolean
    groceries?: boolean
    subscriptions?: boolean
    miscellaneous?: boolean
    totalDebt?: boolean
    monthlyEMI?: boolean
    emergencyFund?: boolean
    otherSavings?: boolean
    sipMonthly?: boolean
    lumpSumInvestment?: boolean
    overallScore?: boolean
    emergencyFundScore?: boolean
    debtRatioScore?: boolean
    investmentAllocationScore?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["financialData"]>

  export type FinancialDataSelectScalar = {
    id?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    monthlySalary?: boolean
    freelanceIncome?: boolean
    rent?: boolean
    utilities?: boolean
    groceries?: boolean
    subscriptions?: boolean
    miscellaneous?: boolean
    totalDebt?: boolean
    monthlyEMI?: boolean
    emergencyFund?: boolean
    otherSavings?: boolean
    sipMonthly?: boolean
    lumpSumInvestment?: boolean
    overallScore?: boolean
    emergencyFundScore?: boolean
    debtRatioScore?: boolean
    investmentAllocationScore?: boolean
    userId?: boolean
  }

  export type FinancialDataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "updatedAt" | "monthlySalary" | "freelanceIncome" | "rent" | "utilities" | "groceries" | "subscriptions" | "miscellaneous" | "totalDebt" | "monthlyEMI" | "emergencyFund" | "otherSavings" | "sipMonthly" | "lumpSumInvestment" | "overallScore" | "emergencyFundScore" | "debtRatioScore" | "investmentAllocationScore" | "userId", ExtArgs["result"]["financialData"]>
  export type FinancialDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FinancialDataIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FinancialDataIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FinancialDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FinancialData"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      updatedAt: Date
      monthlySalary: number
      freelanceIncome: number
      rent: number
      utilities: number
      groceries: number
      subscriptions: number
      miscellaneous: number
      totalDebt: number
      monthlyEMI: number
      emergencyFund: number
      otherSavings: number
      sipMonthly: number
      lumpSumInvestment: number
      overallScore: number | null
      emergencyFundScore: number | null
      debtRatioScore: number | null
      investmentAllocationScore: number | null
      userId: string
    }, ExtArgs["result"]["financialData"]>
    composites: {}
  }

  type FinancialDataGetPayload<S extends boolean | null | undefined | FinancialDataDefaultArgs> = $Result.GetResult<Prisma.$FinancialDataPayload, S>

  type FinancialDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FinancialDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FinancialDataCountAggregateInputType | true
    }

  export interface FinancialDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FinancialData'], meta: { name: 'FinancialData' } }
    /**
     * Find zero or one FinancialData that matches the filter.
     * @param {FinancialDataFindUniqueArgs} args - Arguments to find a FinancialData
     * @example
     * // Get one FinancialData
     * const financialData = await prisma.financialData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FinancialDataFindUniqueArgs>(args: SelectSubset<T, FinancialDataFindUniqueArgs<ExtArgs>>): Prisma__FinancialDataClient<$Result.GetResult<Prisma.$FinancialDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FinancialData that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FinancialDataFindUniqueOrThrowArgs} args - Arguments to find a FinancialData
     * @example
     * // Get one FinancialData
     * const financialData = await prisma.financialData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FinancialDataFindUniqueOrThrowArgs>(args: SelectSubset<T, FinancialDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FinancialDataClient<$Result.GetResult<Prisma.$FinancialDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FinancialData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialDataFindFirstArgs} args - Arguments to find a FinancialData
     * @example
     * // Get one FinancialData
     * const financialData = await prisma.financialData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FinancialDataFindFirstArgs>(args?: SelectSubset<T, FinancialDataFindFirstArgs<ExtArgs>>): Prisma__FinancialDataClient<$Result.GetResult<Prisma.$FinancialDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FinancialData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialDataFindFirstOrThrowArgs} args - Arguments to find a FinancialData
     * @example
     * // Get one FinancialData
     * const financialData = await prisma.financialData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FinancialDataFindFirstOrThrowArgs>(args?: SelectSubset<T, FinancialDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__FinancialDataClient<$Result.GetResult<Prisma.$FinancialDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FinancialData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FinancialData
     * const financialData = await prisma.financialData.findMany()
     * 
     * // Get first 10 FinancialData
     * const financialData = await prisma.financialData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const financialDataWithIdOnly = await prisma.financialData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FinancialDataFindManyArgs>(args?: SelectSubset<T, FinancialDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FinancialData.
     * @param {FinancialDataCreateArgs} args - Arguments to create a FinancialData.
     * @example
     * // Create one FinancialData
     * const FinancialData = await prisma.financialData.create({
     *   data: {
     *     // ... data to create a FinancialData
     *   }
     * })
     * 
     */
    create<T extends FinancialDataCreateArgs>(args: SelectSubset<T, FinancialDataCreateArgs<ExtArgs>>): Prisma__FinancialDataClient<$Result.GetResult<Prisma.$FinancialDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FinancialData.
     * @param {FinancialDataCreateManyArgs} args - Arguments to create many FinancialData.
     * @example
     * // Create many FinancialData
     * const financialData = await prisma.financialData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FinancialDataCreateManyArgs>(args?: SelectSubset<T, FinancialDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FinancialData and returns the data saved in the database.
     * @param {FinancialDataCreateManyAndReturnArgs} args - Arguments to create many FinancialData.
     * @example
     * // Create many FinancialData
     * const financialData = await prisma.financialData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FinancialData and only return the `id`
     * const financialDataWithIdOnly = await prisma.financialData.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FinancialDataCreateManyAndReturnArgs>(args?: SelectSubset<T, FinancialDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialDataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FinancialData.
     * @param {FinancialDataDeleteArgs} args - Arguments to delete one FinancialData.
     * @example
     * // Delete one FinancialData
     * const FinancialData = await prisma.financialData.delete({
     *   where: {
     *     // ... filter to delete one FinancialData
     *   }
     * })
     * 
     */
    delete<T extends FinancialDataDeleteArgs>(args: SelectSubset<T, FinancialDataDeleteArgs<ExtArgs>>): Prisma__FinancialDataClient<$Result.GetResult<Prisma.$FinancialDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FinancialData.
     * @param {FinancialDataUpdateArgs} args - Arguments to update one FinancialData.
     * @example
     * // Update one FinancialData
     * const financialData = await prisma.financialData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FinancialDataUpdateArgs>(args: SelectSubset<T, FinancialDataUpdateArgs<ExtArgs>>): Prisma__FinancialDataClient<$Result.GetResult<Prisma.$FinancialDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FinancialData.
     * @param {FinancialDataDeleteManyArgs} args - Arguments to filter FinancialData to delete.
     * @example
     * // Delete a few FinancialData
     * const { count } = await prisma.financialData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FinancialDataDeleteManyArgs>(args?: SelectSubset<T, FinancialDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FinancialData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FinancialData
     * const financialData = await prisma.financialData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FinancialDataUpdateManyArgs>(args: SelectSubset<T, FinancialDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FinancialData and returns the data updated in the database.
     * @param {FinancialDataUpdateManyAndReturnArgs} args - Arguments to update many FinancialData.
     * @example
     * // Update many FinancialData
     * const financialData = await prisma.financialData.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FinancialData and only return the `id`
     * const financialDataWithIdOnly = await prisma.financialData.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FinancialDataUpdateManyAndReturnArgs>(args: SelectSubset<T, FinancialDataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialDataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FinancialData.
     * @param {FinancialDataUpsertArgs} args - Arguments to update or create a FinancialData.
     * @example
     * // Update or create a FinancialData
     * const financialData = await prisma.financialData.upsert({
     *   create: {
     *     // ... data to create a FinancialData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FinancialData we want to update
     *   }
     * })
     */
    upsert<T extends FinancialDataUpsertArgs>(args: SelectSubset<T, FinancialDataUpsertArgs<ExtArgs>>): Prisma__FinancialDataClient<$Result.GetResult<Prisma.$FinancialDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FinancialData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialDataCountArgs} args - Arguments to filter FinancialData to count.
     * @example
     * // Count the number of FinancialData
     * const count = await prisma.financialData.count({
     *   where: {
     *     // ... the filter for the FinancialData we want to count
     *   }
     * })
    **/
    count<T extends FinancialDataCountArgs>(
      args?: Subset<T, FinancialDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FinancialDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FinancialData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FinancialDataAggregateArgs>(args: Subset<T, FinancialDataAggregateArgs>): Prisma.PrismaPromise<GetFinancialDataAggregateType<T>>

    /**
     * Group by FinancialData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FinancialDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FinancialDataGroupByArgs['orderBy'] }
        : { orderBy?: FinancialDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FinancialDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFinancialDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FinancialData model
   */
  readonly fields: FinancialDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FinancialData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FinancialDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FinancialData model
   */
  interface FinancialDataFieldRefs {
    readonly id: FieldRef<"FinancialData", 'String'>
    readonly createdAt: FieldRef<"FinancialData", 'DateTime'>
    readonly updatedAt: FieldRef<"FinancialData", 'DateTime'>
    readonly monthlySalary: FieldRef<"FinancialData", 'Float'>
    readonly freelanceIncome: FieldRef<"FinancialData", 'Float'>
    readonly rent: FieldRef<"FinancialData", 'Float'>
    readonly utilities: FieldRef<"FinancialData", 'Float'>
    readonly groceries: FieldRef<"FinancialData", 'Float'>
    readonly subscriptions: FieldRef<"FinancialData", 'Float'>
    readonly miscellaneous: FieldRef<"FinancialData", 'Float'>
    readonly totalDebt: FieldRef<"FinancialData", 'Float'>
    readonly monthlyEMI: FieldRef<"FinancialData", 'Float'>
    readonly emergencyFund: FieldRef<"FinancialData", 'Float'>
    readonly otherSavings: FieldRef<"FinancialData", 'Float'>
    readonly sipMonthly: FieldRef<"FinancialData", 'Float'>
    readonly lumpSumInvestment: FieldRef<"FinancialData", 'Float'>
    readonly overallScore: FieldRef<"FinancialData", 'Int'>
    readonly emergencyFundScore: FieldRef<"FinancialData", 'Int'>
    readonly debtRatioScore: FieldRef<"FinancialData", 'Int'>
    readonly investmentAllocationScore: FieldRef<"FinancialData", 'Int'>
    readonly userId: FieldRef<"FinancialData", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FinancialData findUnique
   */
  export type FinancialDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialData
     */
    select?: FinancialDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialData
     */
    omit?: FinancialDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDataInclude<ExtArgs> | null
    /**
     * Filter, which FinancialData to fetch.
     */
    where: FinancialDataWhereUniqueInput
  }

  /**
   * FinancialData findUniqueOrThrow
   */
  export type FinancialDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialData
     */
    select?: FinancialDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialData
     */
    omit?: FinancialDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDataInclude<ExtArgs> | null
    /**
     * Filter, which FinancialData to fetch.
     */
    where: FinancialDataWhereUniqueInput
  }

  /**
   * FinancialData findFirst
   */
  export type FinancialDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialData
     */
    select?: FinancialDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialData
     */
    omit?: FinancialDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDataInclude<ExtArgs> | null
    /**
     * Filter, which FinancialData to fetch.
     */
    where?: FinancialDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialData to fetch.
     */
    orderBy?: FinancialDataOrderByWithRelationInput | FinancialDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FinancialData.
     */
    cursor?: FinancialDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FinancialData.
     */
    distinct?: FinancialDataScalarFieldEnum | FinancialDataScalarFieldEnum[]
  }

  /**
   * FinancialData findFirstOrThrow
   */
  export type FinancialDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialData
     */
    select?: FinancialDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialData
     */
    omit?: FinancialDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDataInclude<ExtArgs> | null
    /**
     * Filter, which FinancialData to fetch.
     */
    where?: FinancialDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialData to fetch.
     */
    orderBy?: FinancialDataOrderByWithRelationInput | FinancialDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FinancialData.
     */
    cursor?: FinancialDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FinancialData.
     */
    distinct?: FinancialDataScalarFieldEnum | FinancialDataScalarFieldEnum[]
  }

  /**
   * FinancialData findMany
   */
  export type FinancialDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialData
     */
    select?: FinancialDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialData
     */
    omit?: FinancialDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDataInclude<ExtArgs> | null
    /**
     * Filter, which FinancialData to fetch.
     */
    where?: FinancialDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialData to fetch.
     */
    orderBy?: FinancialDataOrderByWithRelationInput | FinancialDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FinancialData.
     */
    cursor?: FinancialDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialData.
     */
    skip?: number
    distinct?: FinancialDataScalarFieldEnum | FinancialDataScalarFieldEnum[]
  }

  /**
   * FinancialData create
   */
  export type FinancialDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialData
     */
    select?: FinancialDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialData
     */
    omit?: FinancialDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDataInclude<ExtArgs> | null
    /**
     * The data needed to create a FinancialData.
     */
    data: XOR<FinancialDataCreateInput, FinancialDataUncheckedCreateInput>
  }

  /**
   * FinancialData createMany
   */
  export type FinancialDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FinancialData.
     */
    data: FinancialDataCreateManyInput | FinancialDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FinancialData createManyAndReturn
   */
  export type FinancialDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialData
     */
    select?: FinancialDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialData
     */
    omit?: FinancialDataOmit<ExtArgs> | null
    /**
     * The data used to create many FinancialData.
     */
    data: FinancialDataCreateManyInput | FinancialDataCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDataIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FinancialData update
   */
  export type FinancialDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialData
     */
    select?: FinancialDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialData
     */
    omit?: FinancialDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDataInclude<ExtArgs> | null
    /**
     * The data needed to update a FinancialData.
     */
    data: XOR<FinancialDataUpdateInput, FinancialDataUncheckedUpdateInput>
    /**
     * Choose, which FinancialData to update.
     */
    where: FinancialDataWhereUniqueInput
  }

  /**
   * FinancialData updateMany
   */
  export type FinancialDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FinancialData.
     */
    data: XOR<FinancialDataUpdateManyMutationInput, FinancialDataUncheckedUpdateManyInput>
    /**
     * Filter which FinancialData to update
     */
    where?: FinancialDataWhereInput
    /**
     * Limit how many FinancialData to update.
     */
    limit?: number
  }

  /**
   * FinancialData updateManyAndReturn
   */
  export type FinancialDataUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialData
     */
    select?: FinancialDataSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialData
     */
    omit?: FinancialDataOmit<ExtArgs> | null
    /**
     * The data used to update FinancialData.
     */
    data: XOR<FinancialDataUpdateManyMutationInput, FinancialDataUncheckedUpdateManyInput>
    /**
     * Filter which FinancialData to update
     */
    where?: FinancialDataWhereInput
    /**
     * Limit how many FinancialData to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDataIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FinancialData upsert
   */
  export type FinancialDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialData
     */
    select?: FinancialDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialData
     */
    omit?: FinancialDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDataInclude<ExtArgs> | null
    /**
     * The filter to search for the FinancialData to update in case it exists.
     */
    where: FinancialDataWhereUniqueInput
    /**
     * In case the FinancialData found by the `where` argument doesn't exist, create a new FinancialData with this data.
     */
    create: XOR<FinancialDataCreateInput, FinancialDataUncheckedCreateInput>
    /**
     * In case the FinancialData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FinancialDataUpdateInput, FinancialDataUncheckedUpdateInput>
  }

  /**
   * FinancialData delete
   */
  export type FinancialDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialData
     */
    select?: FinancialDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialData
     */
    omit?: FinancialDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDataInclude<ExtArgs> | null
    /**
     * Filter which FinancialData to delete.
     */
    where: FinancialDataWhereUniqueInput
  }

  /**
   * FinancialData deleteMany
   */
  export type FinancialDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FinancialData to delete
     */
    where?: FinancialDataWhereInput
    /**
     * Limit how many FinancialData to delete.
     */
    limit?: number
  }

  /**
   * FinancialData without action
   */
  export type FinancialDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialData
     */
    select?: FinancialDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialData
     */
    omit?: FinancialDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDataInclude<ExtArgs> | null
  }


  /**
   * Model HistoricalData
   */

  export type AggregateHistoricalData = {
    _count: HistoricalDataCountAggregateOutputType | null
    _avg: HistoricalDataAvgAggregateOutputType | null
    _sum: HistoricalDataSumAggregateOutputType | null
    _min: HistoricalDataMinAggregateOutputType | null
    _max: HistoricalDataMaxAggregateOutputType | null
  }

  export type HistoricalDataAvgAggregateOutputType = {
    monthlySalary: number | null
    freelanceIncome: number | null
    rent: number | null
    utilities: number | null
    groceries: number | null
    subscriptions: number | null
    miscellaneous: number | null
    totalDebt: number | null
    monthlyEMI: number | null
    emergencyFund: number | null
    otherSavings: number | null
    sipMonthly: number | null
    lumpSumInvestment: number | null
  }

  export type HistoricalDataSumAggregateOutputType = {
    monthlySalary: number | null
    freelanceIncome: number | null
    rent: number | null
    utilities: number | null
    groceries: number | null
    subscriptions: number | null
    miscellaneous: number | null
    totalDebt: number | null
    monthlyEMI: number | null
    emergencyFund: number | null
    otherSavings: number | null
    sipMonthly: number | null
    lumpSumInvestment: number | null
  }

  export type HistoricalDataMinAggregateOutputType = {
    id: string | null
    month: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    monthlySalary: number | null
    freelanceIncome: number | null
    rent: number | null
    utilities: number | null
    groceries: number | null
    subscriptions: number | null
    miscellaneous: number | null
    totalDebt: number | null
    monthlyEMI: number | null
    emergencyFund: number | null
    otherSavings: number | null
    sipMonthly: number | null
    lumpSumInvestment: number | null
    userId: string | null
  }

  export type HistoricalDataMaxAggregateOutputType = {
    id: string | null
    month: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    monthlySalary: number | null
    freelanceIncome: number | null
    rent: number | null
    utilities: number | null
    groceries: number | null
    subscriptions: number | null
    miscellaneous: number | null
    totalDebt: number | null
    monthlyEMI: number | null
    emergencyFund: number | null
    otherSavings: number | null
    sipMonthly: number | null
    lumpSumInvestment: number | null
    userId: string | null
  }

  export type HistoricalDataCountAggregateOutputType = {
    id: number
    month: number
    createdAt: number
    updatedAt: number
    monthlySalary: number
    freelanceIncome: number
    rent: number
    utilities: number
    groceries: number
    subscriptions: number
    miscellaneous: number
    totalDebt: number
    monthlyEMI: number
    emergencyFund: number
    otherSavings: number
    sipMonthly: number
    lumpSumInvestment: number
    userId: number
    _all: number
  }


  export type HistoricalDataAvgAggregateInputType = {
    monthlySalary?: true
    freelanceIncome?: true
    rent?: true
    utilities?: true
    groceries?: true
    subscriptions?: true
    miscellaneous?: true
    totalDebt?: true
    monthlyEMI?: true
    emergencyFund?: true
    otherSavings?: true
    sipMonthly?: true
    lumpSumInvestment?: true
  }

  export type HistoricalDataSumAggregateInputType = {
    monthlySalary?: true
    freelanceIncome?: true
    rent?: true
    utilities?: true
    groceries?: true
    subscriptions?: true
    miscellaneous?: true
    totalDebt?: true
    monthlyEMI?: true
    emergencyFund?: true
    otherSavings?: true
    sipMonthly?: true
    lumpSumInvestment?: true
  }

  export type HistoricalDataMinAggregateInputType = {
    id?: true
    month?: true
    createdAt?: true
    updatedAt?: true
    monthlySalary?: true
    freelanceIncome?: true
    rent?: true
    utilities?: true
    groceries?: true
    subscriptions?: true
    miscellaneous?: true
    totalDebt?: true
    monthlyEMI?: true
    emergencyFund?: true
    otherSavings?: true
    sipMonthly?: true
    lumpSumInvestment?: true
    userId?: true
  }

  export type HistoricalDataMaxAggregateInputType = {
    id?: true
    month?: true
    createdAt?: true
    updatedAt?: true
    monthlySalary?: true
    freelanceIncome?: true
    rent?: true
    utilities?: true
    groceries?: true
    subscriptions?: true
    miscellaneous?: true
    totalDebt?: true
    monthlyEMI?: true
    emergencyFund?: true
    otherSavings?: true
    sipMonthly?: true
    lumpSumInvestment?: true
    userId?: true
  }

  export type HistoricalDataCountAggregateInputType = {
    id?: true
    month?: true
    createdAt?: true
    updatedAt?: true
    monthlySalary?: true
    freelanceIncome?: true
    rent?: true
    utilities?: true
    groceries?: true
    subscriptions?: true
    miscellaneous?: true
    totalDebt?: true
    monthlyEMI?: true
    emergencyFund?: true
    otherSavings?: true
    sipMonthly?: true
    lumpSumInvestment?: true
    userId?: true
    _all?: true
  }

  export type HistoricalDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HistoricalData to aggregate.
     */
    where?: HistoricalDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoricalData to fetch.
     */
    orderBy?: HistoricalDataOrderByWithRelationInput | HistoricalDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HistoricalDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoricalData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoricalData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HistoricalData
    **/
    _count?: true | HistoricalDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistoricalDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistoricalDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistoricalDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistoricalDataMaxAggregateInputType
  }

  export type GetHistoricalDataAggregateType<T extends HistoricalDataAggregateArgs> = {
        [P in keyof T & keyof AggregateHistoricalData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistoricalData[P]>
      : GetScalarType<T[P], AggregateHistoricalData[P]>
  }




  export type HistoricalDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoricalDataWhereInput
    orderBy?: HistoricalDataOrderByWithAggregationInput | HistoricalDataOrderByWithAggregationInput[]
    by: HistoricalDataScalarFieldEnum[] | HistoricalDataScalarFieldEnum
    having?: HistoricalDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistoricalDataCountAggregateInputType | true
    _avg?: HistoricalDataAvgAggregateInputType
    _sum?: HistoricalDataSumAggregateInputType
    _min?: HistoricalDataMinAggregateInputType
    _max?: HistoricalDataMaxAggregateInputType
  }

  export type HistoricalDataGroupByOutputType = {
    id: string
    month: Date
    createdAt: Date
    updatedAt: Date
    monthlySalary: number
    freelanceIncome: number
    rent: number
    utilities: number
    groceries: number
    subscriptions: number
    miscellaneous: number
    totalDebt: number
    monthlyEMI: number
    emergencyFund: number
    otherSavings: number
    sipMonthly: number
    lumpSumInvestment: number
    userId: string
    _count: HistoricalDataCountAggregateOutputType | null
    _avg: HistoricalDataAvgAggregateOutputType | null
    _sum: HistoricalDataSumAggregateOutputType | null
    _min: HistoricalDataMinAggregateOutputType | null
    _max: HistoricalDataMaxAggregateOutputType | null
  }

  type GetHistoricalDataGroupByPayload<T extends HistoricalDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistoricalDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistoricalDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistoricalDataGroupByOutputType[P]>
            : GetScalarType<T[P], HistoricalDataGroupByOutputType[P]>
        }
      >
    >


  export type HistoricalDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    month?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    monthlySalary?: boolean
    freelanceIncome?: boolean
    rent?: boolean
    utilities?: boolean
    groceries?: boolean
    subscriptions?: boolean
    miscellaneous?: boolean
    totalDebt?: boolean
    monthlyEMI?: boolean
    emergencyFund?: boolean
    otherSavings?: boolean
    sipMonthly?: boolean
    lumpSumInvestment?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historicalData"]>

  export type HistoricalDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    month?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    monthlySalary?: boolean
    freelanceIncome?: boolean
    rent?: boolean
    utilities?: boolean
    groceries?: boolean
    subscriptions?: boolean
    miscellaneous?: boolean
    totalDebt?: boolean
    monthlyEMI?: boolean
    emergencyFund?: boolean
    otherSavings?: boolean
    sipMonthly?: boolean
    lumpSumInvestment?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historicalData"]>

  export type HistoricalDataSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    month?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    monthlySalary?: boolean
    freelanceIncome?: boolean
    rent?: boolean
    utilities?: boolean
    groceries?: boolean
    subscriptions?: boolean
    miscellaneous?: boolean
    totalDebt?: boolean
    monthlyEMI?: boolean
    emergencyFund?: boolean
    otherSavings?: boolean
    sipMonthly?: boolean
    lumpSumInvestment?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historicalData"]>

  export type HistoricalDataSelectScalar = {
    id?: boolean
    month?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    monthlySalary?: boolean
    freelanceIncome?: boolean
    rent?: boolean
    utilities?: boolean
    groceries?: boolean
    subscriptions?: boolean
    miscellaneous?: boolean
    totalDebt?: boolean
    monthlyEMI?: boolean
    emergencyFund?: boolean
    otherSavings?: boolean
    sipMonthly?: boolean
    lumpSumInvestment?: boolean
    userId?: boolean
  }

  export type HistoricalDataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "month" | "createdAt" | "updatedAt" | "monthlySalary" | "freelanceIncome" | "rent" | "utilities" | "groceries" | "subscriptions" | "miscellaneous" | "totalDebt" | "monthlyEMI" | "emergencyFund" | "otherSavings" | "sipMonthly" | "lumpSumInvestment" | "userId", ExtArgs["result"]["historicalData"]>
  export type HistoricalDataInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type HistoricalDataIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type HistoricalDataIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $HistoricalDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HistoricalData"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      month: Date
      createdAt: Date
      updatedAt: Date
      monthlySalary: number
      freelanceIncome: number
      rent: number
      utilities: number
      groceries: number
      subscriptions: number
      miscellaneous: number
      totalDebt: number
      monthlyEMI: number
      emergencyFund: number
      otherSavings: number
      sipMonthly: number
      lumpSumInvestment: number
      userId: string
    }, ExtArgs["result"]["historicalData"]>
    composites: {}
  }

  type HistoricalDataGetPayload<S extends boolean | null | undefined | HistoricalDataDefaultArgs> = $Result.GetResult<Prisma.$HistoricalDataPayload, S>

  type HistoricalDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HistoricalDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HistoricalDataCountAggregateInputType | true
    }

  export interface HistoricalDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HistoricalData'], meta: { name: 'HistoricalData' } }
    /**
     * Find zero or one HistoricalData that matches the filter.
     * @param {HistoricalDataFindUniqueArgs} args - Arguments to find a HistoricalData
     * @example
     * // Get one HistoricalData
     * const historicalData = await prisma.historicalData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HistoricalDataFindUniqueArgs>(args: SelectSubset<T, HistoricalDataFindUniqueArgs<ExtArgs>>): Prisma__HistoricalDataClient<$Result.GetResult<Prisma.$HistoricalDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HistoricalData that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HistoricalDataFindUniqueOrThrowArgs} args - Arguments to find a HistoricalData
     * @example
     * // Get one HistoricalData
     * const historicalData = await prisma.historicalData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HistoricalDataFindUniqueOrThrowArgs>(args: SelectSubset<T, HistoricalDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HistoricalDataClient<$Result.GetResult<Prisma.$HistoricalDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HistoricalData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricalDataFindFirstArgs} args - Arguments to find a HistoricalData
     * @example
     * // Get one HistoricalData
     * const historicalData = await prisma.historicalData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HistoricalDataFindFirstArgs>(args?: SelectSubset<T, HistoricalDataFindFirstArgs<ExtArgs>>): Prisma__HistoricalDataClient<$Result.GetResult<Prisma.$HistoricalDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HistoricalData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricalDataFindFirstOrThrowArgs} args - Arguments to find a HistoricalData
     * @example
     * // Get one HistoricalData
     * const historicalData = await prisma.historicalData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HistoricalDataFindFirstOrThrowArgs>(args?: SelectSubset<T, HistoricalDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__HistoricalDataClient<$Result.GetResult<Prisma.$HistoricalDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HistoricalData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricalDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HistoricalData
     * const historicalData = await prisma.historicalData.findMany()
     * 
     * // Get first 10 HistoricalData
     * const historicalData = await prisma.historicalData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const historicalDataWithIdOnly = await prisma.historicalData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HistoricalDataFindManyArgs>(args?: SelectSubset<T, HistoricalDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoricalDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HistoricalData.
     * @param {HistoricalDataCreateArgs} args - Arguments to create a HistoricalData.
     * @example
     * // Create one HistoricalData
     * const HistoricalData = await prisma.historicalData.create({
     *   data: {
     *     // ... data to create a HistoricalData
     *   }
     * })
     * 
     */
    create<T extends HistoricalDataCreateArgs>(args: SelectSubset<T, HistoricalDataCreateArgs<ExtArgs>>): Prisma__HistoricalDataClient<$Result.GetResult<Prisma.$HistoricalDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HistoricalData.
     * @param {HistoricalDataCreateManyArgs} args - Arguments to create many HistoricalData.
     * @example
     * // Create many HistoricalData
     * const historicalData = await prisma.historicalData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HistoricalDataCreateManyArgs>(args?: SelectSubset<T, HistoricalDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HistoricalData and returns the data saved in the database.
     * @param {HistoricalDataCreateManyAndReturnArgs} args - Arguments to create many HistoricalData.
     * @example
     * // Create many HistoricalData
     * const historicalData = await prisma.historicalData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HistoricalData and only return the `id`
     * const historicalDataWithIdOnly = await prisma.historicalData.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HistoricalDataCreateManyAndReturnArgs>(args?: SelectSubset<T, HistoricalDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoricalDataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HistoricalData.
     * @param {HistoricalDataDeleteArgs} args - Arguments to delete one HistoricalData.
     * @example
     * // Delete one HistoricalData
     * const HistoricalData = await prisma.historicalData.delete({
     *   where: {
     *     // ... filter to delete one HistoricalData
     *   }
     * })
     * 
     */
    delete<T extends HistoricalDataDeleteArgs>(args: SelectSubset<T, HistoricalDataDeleteArgs<ExtArgs>>): Prisma__HistoricalDataClient<$Result.GetResult<Prisma.$HistoricalDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HistoricalData.
     * @param {HistoricalDataUpdateArgs} args - Arguments to update one HistoricalData.
     * @example
     * // Update one HistoricalData
     * const historicalData = await prisma.historicalData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HistoricalDataUpdateArgs>(args: SelectSubset<T, HistoricalDataUpdateArgs<ExtArgs>>): Prisma__HistoricalDataClient<$Result.GetResult<Prisma.$HistoricalDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HistoricalData.
     * @param {HistoricalDataDeleteManyArgs} args - Arguments to filter HistoricalData to delete.
     * @example
     * // Delete a few HistoricalData
     * const { count } = await prisma.historicalData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HistoricalDataDeleteManyArgs>(args?: SelectSubset<T, HistoricalDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HistoricalData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricalDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HistoricalData
     * const historicalData = await prisma.historicalData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HistoricalDataUpdateManyArgs>(args: SelectSubset<T, HistoricalDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HistoricalData and returns the data updated in the database.
     * @param {HistoricalDataUpdateManyAndReturnArgs} args - Arguments to update many HistoricalData.
     * @example
     * // Update many HistoricalData
     * const historicalData = await prisma.historicalData.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HistoricalData and only return the `id`
     * const historicalDataWithIdOnly = await prisma.historicalData.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HistoricalDataUpdateManyAndReturnArgs>(args: SelectSubset<T, HistoricalDataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoricalDataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HistoricalData.
     * @param {HistoricalDataUpsertArgs} args - Arguments to update or create a HistoricalData.
     * @example
     * // Update or create a HistoricalData
     * const historicalData = await prisma.historicalData.upsert({
     *   create: {
     *     // ... data to create a HistoricalData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HistoricalData we want to update
     *   }
     * })
     */
    upsert<T extends HistoricalDataUpsertArgs>(args: SelectSubset<T, HistoricalDataUpsertArgs<ExtArgs>>): Prisma__HistoricalDataClient<$Result.GetResult<Prisma.$HistoricalDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HistoricalData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricalDataCountArgs} args - Arguments to filter HistoricalData to count.
     * @example
     * // Count the number of HistoricalData
     * const count = await prisma.historicalData.count({
     *   where: {
     *     // ... the filter for the HistoricalData we want to count
     *   }
     * })
    **/
    count<T extends HistoricalDataCountArgs>(
      args?: Subset<T, HistoricalDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistoricalDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HistoricalData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricalDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistoricalDataAggregateArgs>(args: Subset<T, HistoricalDataAggregateArgs>): Prisma.PrismaPromise<GetHistoricalDataAggregateType<T>>

    /**
     * Group by HistoricalData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoricalDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistoricalDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistoricalDataGroupByArgs['orderBy'] }
        : { orderBy?: HistoricalDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistoricalDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoricalDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HistoricalData model
   */
  readonly fields: HistoricalDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HistoricalData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HistoricalDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HistoricalData model
   */
  interface HistoricalDataFieldRefs {
    readonly id: FieldRef<"HistoricalData", 'String'>
    readonly month: FieldRef<"HistoricalData", 'DateTime'>
    readonly createdAt: FieldRef<"HistoricalData", 'DateTime'>
    readonly updatedAt: FieldRef<"HistoricalData", 'DateTime'>
    readonly monthlySalary: FieldRef<"HistoricalData", 'Float'>
    readonly freelanceIncome: FieldRef<"HistoricalData", 'Float'>
    readonly rent: FieldRef<"HistoricalData", 'Float'>
    readonly utilities: FieldRef<"HistoricalData", 'Float'>
    readonly groceries: FieldRef<"HistoricalData", 'Float'>
    readonly subscriptions: FieldRef<"HistoricalData", 'Float'>
    readonly miscellaneous: FieldRef<"HistoricalData", 'Float'>
    readonly totalDebt: FieldRef<"HistoricalData", 'Float'>
    readonly monthlyEMI: FieldRef<"HistoricalData", 'Float'>
    readonly emergencyFund: FieldRef<"HistoricalData", 'Float'>
    readonly otherSavings: FieldRef<"HistoricalData", 'Float'>
    readonly sipMonthly: FieldRef<"HistoricalData", 'Float'>
    readonly lumpSumInvestment: FieldRef<"HistoricalData", 'Float'>
    readonly userId: FieldRef<"HistoricalData", 'String'>
  }
    

  // Custom InputTypes
  /**
   * HistoricalData findUnique
   */
  export type HistoricalDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricalData
     */
    select?: HistoricalDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricalData
     */
    omit?: HistoricalDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricalDataInclude<ExtArgs> | null
    /**
     * Filter, which HistoricalData to fetch.
     */
    where: HistoricalDataWhereUniqueInput
  }

  /**
   * HistoricalData findUniqueOrThrow
   */
  export type HistoricalDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricalData
     */
    select?: HistoricalDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricalData
     */
    omit?: HistoricalDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricalDataInclude<ExtArgs> | null
    /**
     * Filter, which HistoricalData to fetch.
     */
    where: HistoricalDataWhereUniqueInput
  }

  /**
   * HistoricalData findFirst
   */
  export type HistoricalDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricalData
     */
    select?: HistoricalDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricalData
     */
    omit?: HistoricalDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricalDataInclude<ExtArgs> | null
    /**
     * Filter, which HistoricalData to fetch.
     */
    where?: HistoricalDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoricalData to fetch.
     */
    orderBy?: HistoricalDataOrderByWithRelationInput | HistoricalDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HistoricalData.
     */
    cursor?: HistoricalDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoricalData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoricalData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HistoricalData.
     */
    distinct?: HistoricalDataScalarFieldEnum | HistoricalDataScalarFieldEnum[]
  }

  /**
   * HistoricalData findFirstOrThrow
   */
  export type HistoricalDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricalData
     */
    select?: HistoricalDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricalData
     */
    omit?: HistoricalDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricalDataInclude<ExtArgs> | null
    /**
     * Filter, which HistoricalData to fetch.
     */
    where?: HistoricalDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoricalData to fetch.
     */
    orderBy?: HistoricalDataOrderByWithRelationInput | HistoricalDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HistoricalData.
     */
    cursor?: HistoricalDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoricalData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoricalData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HistoricalData.
     */
    distinct?: HistoricalDataScalarFieldEnum | HistoricalDataScalarFieldEnum[]
  }

  /**
   * HistoricalData findMany
   */
  export type HistoricalDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricalData
     */
    select?: HistoricalDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricalData
     */
    omit?: HistoricalDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricalDataInclude<ExtArgs> | null
    /**
     * Filter, which HistoricalData to fetch.
     */
    where?: HistoricalDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HistoricalData to fetch.
     */
    orderBy?: HistoricalDataOrderByWithRelationInput | HistoricalDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HistoricalData.
     */
    cursor?: HistoricalDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HistoricalData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HistoricalData.
     */
    skip?: number
    distinct?: HistoricalDataScalarFieldEnum | HistoricalDataScalarFieldEnum[]
  }

  /**
   * HistoricalData create
   */
  export type HistoricalDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricalData
     */
    select?: HistoricalDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricalData
     */
    omit?: HistoricalDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricalDataInclude<ExtArgs> | null
    /**
     * The data needed to create a HistoricalData.
     */
    data: XOR<HistoricalDataCreateInput, HistoricalDataUncheckedCreateInput>
  }

  /**
   * HistoricalData createMany
   */
  export type HistoricalDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HistoricalData.
     */
    data: HistoricalDataCreateManyInput | HistoricalDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HistoricalData createManyAndReturn
   */
  export type HistoricalDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricalData
     */
    select?: HistoricalDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricalData
     */
    omit?: HistoricalDataOmit<ExtArgs> | null
    /**
     * The data used to create many HistoricalData.
     */
    data: HistoricalDataCreateManyInput | HistoricalDataCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricalDataIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * HistoricalData update
   */
  export type HistoricalDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricalData
     */
    select?: HistoricalDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricalData
     */
    omit?: HistoricalDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricalDataInclude<ExtArgs> | null
    /**
     * The data needed to update a HistoricalData.
     */
    data: XOR<HistoricalDataUpdateInput, HistoricalDataUncheckedUpdateInput>
    /**
     * Choose, which HistoricalData to update.
     */
    where: HistoricalDataWhereUniqueInput
  }

  /**
   * HistoricalData updateMany
   */
  export type HistoricalDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HistoricalData.
     */
    data: XOR<HistoricalDataUpdateManyMutationInput, HistoricalDataUncheckedUpdateManyInput>
    /**
     * Filter which HistoricalData to update
     */
    where?: HistoricalDataWhereInput
    /**
     * Limit how many HistoricalData to update.
     */
    limit?: number
  }

  /**
   * HistoricalData updateManyAndReturn
   */
  export type HistoricalDataUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricalData
     */
    select?: HistoricalDataSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricalData
     */
    omit?: HistoricalDataOmit<ExtArgs> | null
    /**
     * The data used to update HistoricalData.
     */
    data: XOR<HistoricalDataUpdateManyMutationInput, HistoricalDataUncheckedUpdateManyInput>
    /**
     * Filter which HistoricalData to update
     */
    where?: HistoricalDataWhereInput
    /**
     * Limit how many HistoricalData to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricalDataIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * HistoricalData upsert
   */
  export type HistoricalDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricalData
     */
    select?: HistoricalDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricalData
     */
    omit?: HistoricalDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricalDataInclude<ExtArgs> | null
    /**
     * The filter to search for the HistoricalData to update in case it exists.
     */
    where: HistoricalDataWhereUniqueInput
    /**
     * In case the HistoricalData found by the `where` argument doesn't exist, create a new HistoricalData with this data.
     */
    create: XOR<HistoricalDataCreateInput, HistoricalDataUncheckedCreateInput>
    /**
     * In case the HistoricalData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HistoricalDataUpdateInput, HistoricalDataUncheckedUpdateInput>
  }

  /**
   * HistoricalData delete
   */
  export type HistoricalDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricalData
     */
    select?: HistoricalDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricalData
     */
    omit?: HistoricalDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricalDataInclude<ExtArgs> | null
    /**
     * Filter which HistoricalData to delete.
     */
    where: HistoricalDataWhereUniqueInput
  }

  /**
   * HistoricalData deleteMany
   */
  export type HistoricalDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HistoricalData to delete
     */
    where?: HistoricalDataWhereInput
    /**
     * Limit how many HistoricalData to delete.
     */
    limit?: number
  }

  /**
   * HistoricalData without action
   */
  export type HistoricalDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HistoricalData
     */
    select?: HistoricalDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HistoricalData
     */
    omit?: HistoricalDataOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HistoricalDataInclude<ExtArgs> | null
  }


  /**
   * Model FinancialDecision
   */

  export type AggregateFinancialDecision = {
    _count: FinancialDecisionCountAggregateOutputType | null
    _avg: FinancialDecisionAvgAggregateOutputType | null
    _sum: FinancialDecisionSumAggregateOutputType | null
    _min: FinancialDecisionMinAggregateOutputType | null
    _max: FinancialDecisionMaxAggregateOutputType | null
  }

  export type FinancialDecisionAvgAggregateOutputType = {
    amount: number | null
    expectedReturn: number | null
  }

  export type FinancialDecisionSumAggregateOutputType = {
    amount: number | null
    expectedReturn: number | null
  }

  export type FinancialDecisionMinAggregateOutputType = {
    id: string | null
    title: string | null
    amount: number | null
    date: Date | null
    category: string | null
    alternativeOption: string | null
    expectedReturn: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type FinancialDecisionMaxAggregateOutputType = {
    id: string | null
    title: string | null
    amount: number | null
    date: Date | null
    category: string | null
    alternativeOption: string | null
    expectedReturn: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type FinancialDecisionCountAggregateOutputType = {
    id: number
    title: number
    amount: number
    date: number
    category: number
    alternativeOption: number
    expectedReturn: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type FinancialDecisionAvgAggregateInputType = {
    amount?: true
    expectedReturn?: true
  }

  export type FinancialDecisionSumAggregateInputType = {
    amount?: true
    expectedReturn?: true
  }

  export type FinancialDecisionMinAggregateInputType = {
    id?: true
    title?: true
    amount?: true
    date?: true
    category?: true
    alternativeOption?: true
    expectedReturn?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type FinancialDecisionMaxAggregateInputType = {
    id?: true
    title?: true
    amount?: true
    date?: true
    category?: true
    alternativeOption?: true
    expectedReturn?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type FinancialDecisionCountAggregateInputType = {
    id?: true
    title?: true
    amount?: true
    date?: true
    category?: true
    alternativeOption?: true
    expectedReturn?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type FinancialDecisionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FinancialDecision to aggregate.
     */
    where?: FinancialDecisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialDecisions to fetch.
     */
    orderBy?: FinancialDecisionOrderByWithRelationInput | FinancialDecisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FinancialDecisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialDecisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialDecisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FinancialDecisions
    **/
    _count?: true | FinancialDecisionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FinancialDecisionAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FinancialDecisionSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FinancialDecisionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FinancialDecisionMaxAggregateInputType
  }

  export type GetFinancialDecisionAggregateType<T extends FinancialDecisionAggregateArgs> = {
        [P in keyof T & keyof AggregateFinancialDecision]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFinancialDecision[P]>
      : GetScalarType<T[P], AggregateFinancialDecision[P]>
  }




  export type FinancialDecisionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FinancialDecisionWhereInput
    orderBy?: FinancialDecisionOrderByWithAggregationInput | FinancialDecisionOrderByWithAggregationInput[]
    by: FinancialDecisionScalarFieldEnum[] | FinancialDecisionScalarFieldEnum
    having?: FinancialDecisionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FinancialDecisionCountAggregateInputType | true
    _avg?: FinancialDecisionAvgAggregateInputType
    _sum?: FinancialDecisionSumAggregateInputType
    _min?: FinancialDecisionMinAggregateInputType
    _max?: FinancialDecisionMaxAggregateInputType
  }

  export type FinancialDecisionGroupByOutputType = {
    id: string
    title: string
    amount: number
    date: Date
    category: string
    alternativeOption: string | null
    expectedReturn: number | null
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: FinancialDecisionCountAggregateOutputType | null
    _avg: FinancialDecisionAvgAggregateOutputType | null
    _sum: FinancialDecisionSumAggregateOutputType | null
    _min: FinancialDecisionMinAggregateOutputType | null
    _max: FinancialDecisionMaxAggregateOutputType | null
  }

  type GetFinancialDecisionGroupByPayload<T extends FinancialDecisionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FinancialDecisionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FinancialDecisionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FinancialDecisionGroupByOutputType[P]>
            : GetScalarType<T[P], FinancialDecisionGroupByOutputType[P]>
        }
      >
    >


  export type FinancialDecisionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    amount?: boolean
    date?: boolean
    category?: boolean
    alternativeOption?: boolean
    expectedReturn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["financialDecision"]>

  export type FinancialDecisionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    amount?: boolean
    date?: boolean
    category?: boolean
    alternativeOption?: boolean
    expectedReturn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["financialDecision"]>

  export type FinancialDecisionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    amount?: boolean
    date?: boolean
    category?: boolean
    alternativeOption?: boolean
    expectedReturn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["financialDecision"]>

  export type FinancialDecisionSelectScalar = {
    id?: boolean
    title?: boolean
    amount?: boolean
    date?: boolean
    category?: boolean
    alternativeOption?: boolean
    expectedReturn?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type FinancialDecisionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "title" | "amount" | "date" | "category" | "alternativeOption" | "expectedReturn" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["financialDecision"]>
  export type FinancialDecisionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FinancialDecisionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type FinancialDecisionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $FinancialDecisionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FinancialDecision"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      title: string
      amount: number
      date: Date
      category: string
      alternativeOption: string | null
      expectedReturn: number | null
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["financialDecision"]>
    composites: {}
  }

  type FinancialDecisionGetPayload<S extends boolean | null | undefined | FinancialDecisionDefaultArgs> = $Result.GetResult<Prisma.$FinancialDecisionPayload, S>

  type FinancialDecisionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FinancialDecisionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FinancialDecisionCountAggregateInputType | true
    }

  export interface FinancialDecisionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FinancialDecision'], meta: { name: 'FinancialDecision' } }
    /**
     * Find zero or one FinancialDecision that matches the filter.
     * @param {FinancialDecisionFindUniqueArgs} args - Arguments to find a FinancialDecision
     * @example
     * // Get one FinancialDecision
     * const financialDecision = await prisma.financialDecision.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FinancialDecisionFindUniqueArgs>(args: SelectSubset<T, FinancialDecisionFindUniqueArgs<ExtArgs>>): Prisma__FinancialDecisionClient<$Result.GetResult<Prisma.$FinancialDecisionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one FinancialDecision that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FinancialDecisionFindUniqueOrThrowArgs} args - Arguments to find a FinancialDecision
     * @example
     * // Get one FinancialDecision
     * const financialDecision = await prisma.financialDecision.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FinancialDecisionFindUniqueOrThrowArgs>(args: SelectSubset<T, FinancialDecisionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FinancialDecisionClient<$Result.GetResult<Prisma.$FinancialDecisionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FinancialDecision that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialDecisionFindFirstArgs} args - Arguments to find a FinancialDecision
     * @example
     * // Get one FinancialDecision
     * const financialDecision = await prisma.financialDecision.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FinancialDecisionFindFirstArgs>(args?: SelectSubset<T, FinancialDecisionFindFirstArgs<ExtArgs>>): Prisma__FinancialDecisionClient<$Result.GetResult<Prisma.$FinancialDecisionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first FinancialDecision that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialDecisionFindFirstOrThrowArgs} args - Arguments to find a FinancialDecision
     * @example
     * // Get one FinancialDecision
     * const financialDecision = await prisma.financialDecision.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FinancialDecisionFindFirstOrThrowArgs>(args?: SelectSubset<T, FinancialDecisionFindFirstOrThrowArgs<ExtArgs>>): Prisma__FinancialDecisionClient<$Result.GetResult<Prisma.$FinancialDecisionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more FinancialDecisions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialDecisionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FinancialDecisions
     * const financialDecisions = await prisma.financialDecision.findMany()
     * 
     * // Get first 10 FinancialDecisions
     * const financialDecisions = await prisma.financialDecision.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const financialDecisionWithIdOnly = await prisma.financialDecision.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FinancialDecisionFindManyArgs>(args?: SelectSubset<T, FinancialDecisionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialDecisionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a FinancialDecision.
     * @param {FinancialDecisionCreateArgs} args - Arguments to create a FinancialDecision.
     * @example
     * // Create one FinancialDecision
     * const FinancialDecision = await prisma.financialDecision.create({
     *   data: {
     *     // ... data to create a FinancialDecision
     *   }
     * })
     * 
     */
    create<T extends FinancialDecisionCreateArgs>(args: SelectSubset<T, FinancialDecisionCreateArgs<ExtArgs>>): Prisma__FinancialDecisionClient<$Result.GetResult<Prisma.$FinancialDecisionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many FinancialDecisions.
     * @param {FinancialDecisionCreateManyArgs} args - Arguments to create many FinancialDecisions.
     * @example
     * // Create many FinancialDecisions
     * const financialDecision = await prisma.financialDecision.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FinancialDecisionCreateManyArgs>(args?: SelectSubset<T, FinancialDecisionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many FinancialDecisions and returns the data saved in the database.
     * @param {FinancialDecisionCreateManyAndReturnArgs} args - Arguments to create many FinancialDecisions.
     * @example
     * // Create many FinancialDecisions
     * const financialDecision = await prisma.financialDecision.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many FinancialDecisions and only return the `id`
     * const financialDecisionWithIdOnly = await prisma.financialDecision.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FinancialDecisionCreateManyAndReturnArgs>(args?: SelectSubset<T, FinancialDecisionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialDecisionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a FinancialDecision.
     * @param {FinancialDecisionDeleteArgs} args - Arguments to delete one FinancialDecision.
     * @example
     * // Delete one FinancialDecision
     * const FinancialDecision = await prisma.financialDecision.delete({
     *   where: {
     *     // ... filter to delete one FinancialDecision
     *   }
     * })
     * 
     */
    delete<T extends FinancialDecisionDeleteArgs>(args: SelectSubset<T, FinancialDecisionDeleteArgs<ExtArgs>>): Prisma__FinancialDecisionClient<$Result.GetResult<Prisma.$FinancialDecisionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one FinancialDecision.
     * @param {FinancialDecisionUpdateArgs} args - Arguments to update one FinancialDecision.
     * @example
     * // Update one FinancialDecision
     * const financialDecision = await prisma.financialDecision.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FinancialDecisionUpdateArgs>(args: SelectSubset<T, FinancialDecisionUpdateArgs<ExtArgs>>): Prisma__FinancialDecisionClient<$Result.GetResult<Prisma.$FinancialDecisionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more FinancialDecisions.
     * @param {FinancialDecisionDeleteManyArgs} args - Arguments to filter FinancialDecisions to delete.
     * @example
     * // Delete a few FinancialDecisions
     * const { count } = await prisma.financialDecision.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FinancialDecisionDeleteManyArgs>(args?: SelectSubset<T, FinancialDecisionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FinancialDecisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialDecisionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FinancialDecisions
     * const financialDecision = await prisma.financialDecision.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FinancialDecisionUpdateManyArgs>(args: SelectSubset<T, FinancialDecisionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FinancialDecisions and returns the data updated in the database.
     * @param {FinancialDecisionUpdateManyAndReturnArgs} args - Arguments to update many FinancialDecisions.
     * @example
     * // Update many FinancialDecisions
     * const financialDecision = await prisma.financialDecision.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more FinancialDecisions and only return the `id`
     * const financialDecisionWithIdOnly = await prisma.financialDecision.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FinancialDecisionUpdateManyAndReturnArgs>(args: SelectSubset<T, FinancialDecisionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FinancialDecisionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one FinancialDecision.
     * @param {FinancialDecisionUpsertArgs} args - Arguments to update or create a FinancialDecision.
     * @example
     * // Update or create a FinancialDecision
     * const financialDecision = await prisma.financialDecision.upsert({
     *   create: {
     *     // ... data to create a FinancialDecision
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FinancialDecision we want to update
     *   }
     * })
     */
    upsert<T extends FinancialDecisionUpsertArgs>(args: SelectSubset<T, FinancialDecisionUpsertArgs<ExtArgs>>): Prisma__FinancialDecisionClient<$Result.GetResult<Prisma.$FinancialDecisionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of FinancialDecisions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialDecisionCountArgs} args - Arguments to filter FinancialDecisions to count.
     * @example
     * // Count the number of FinancialDecisions
     * const count = await prisma.financialDecision.count({
     *   where: {
     *     // ... the filter for the FinancialDecisions we want to count
     *   }
     * })
    **/
    count<T extends FinancialDecisionCountArgs>(
      args?: Subset<T, FinancialDecisionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FinancialDecisionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FinancialDecision.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialDecisionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FinancialDecisionAggregateArgs>(args: Subset<T, FinancialDecisionAggregateArgs>): Prisma.PrismaPromise<GetFinancialDecisionAggregateType<T>>

    /**
     * Group by FinancialDecision.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FinancialDecisionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FinancialDecisionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FinancialDecisionGroupByArgs['orderBy'] }
        : { orderBy?: FinancialDecisionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FinancialDecisionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFinancialDecisionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FinancialDecision model
   */
  readonly fields: FinancialDecisionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FinancialDecision.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FinancialDecisionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the FinancialDecision model
   */
  interface FinancialDecisionFieldRefs {
    readonly id: FieldRef<"FinancialDecision", 'String'>
    readonly title: FieldRef<"FinancialDecision", 'String'>
    readonly amount: FieldRef<"FinancialDecision", 'Float'>
    readonly date: FieldRef<"FinancialDecision", 'DateTime'>
    readonly category: FieldRef<"FinancialDecision", 'String'>
    readonly alternativeOption: FieldRef<"FinancialDecision", 'String'>
    readonly expectedReturn: FieldRef<"FinancialDecision", 'Float'>
    readonly createdAt: FieldRef<"FinancialDecision", 'DateTime'>
    readonly updatedAt: FieldRef<"FinancialDecision", 'DateTime'>
    readonly userId: FieldRef<"FinancialDecision", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FinancialDecision findUnique
   */
  export type FinancialDecisionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialDecision
     */
    select?: FinancialDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialDecision
     */
    omit?: FinancialDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDecisionInclude<ExtArgs> | null
    /**
     * Filter, which FinancialDecision to fetch.
     */
    where: FinancialDecisionWhereUniqueInput
  }

  /**
   * FinancialDecision findUniqueOrThrow
   */
  export type FinancialDecisionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialDecision
     */
    select?: FinancialDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialDecision
     */
    omit?: FinancialDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDecisionInclude<ExtArgs> | null
    /**
     * Filter, which FinancialDecision to fetch.
     */
    where: FinancialDecisionWhereUniqueInput
  }

  /**
   * FinancialDecision findFirst
   */
  export type FinancialDecisionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialDecision
     */
    select?: FinancialDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialDecision
     */
    omit?: FinancialDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDecisionInclude<ExtArgs> | null
    /**
     * Filter, which FinancialDecision to fetch.
     */
    where?: FinancialDecisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialDecisions to fetch.
     */
    orderBy?: FinancialDecisionOrderByWithRelationInput | FinancialDecisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FinancialDecisions.
     */
    cursor?: FinancialDecisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialDecisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialDecisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FinancialDecisions.
     */
    distinct?: FinancialDecisionScalarFieldEnum | FinancialDecisionScalarFieldEnum[]
  }

  /**
   * FinancialDecision findFirstOrThrow
   */
  export type FinancialDecisionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialDecision
     */
    select?: FinancialDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialDecision
     */
    omit?: FinancialDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDecisionInclude<ExtArgs> | null
    /**
     * Filter, which FinancialDecision to fetch.
     */
    where?: FinancialDecisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialDecisions to fetch.
     */
    orderBy?: FinancialDecisionOrderByWithRelationInput | FinancialDecisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FinancialDecisions.
     */
    cursor?: FinancialDecisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialDecisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialDecisions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FinancialDecisions.
     */
    distinct?: FinancialDecisionScalarFieldEnum | FinancialDecisionScalarFieldEnum[]
  }

  /**
   * FinancialDecision findMany
   */
  export type FinancialDecisionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialDecision
     */
    select?: FinancialDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialDecision
     */
    omit?: FinancialDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDecisionInclude<ExtArgs> | null
    /**
     * Filter, which FinancialDecisions to fetch.
     */
    where?: FinancialDecisionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FinancialDecisions to fetch.
     */
    orderBy?: FinancialDecisionOrderByWithRelationInput | FinancialDecisionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FinancialDecisions.
     */
    cursor?: FinancialDecisionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FinancialDecisions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FinancialDecisions.
     */
    skip?: number
    distinct?: FinancialDecisionScalarFieldEnum | FinancialDecisionScalarFieldEnum[]
  }

  /**
   * FinancialDecision create
   */
  export type FinancialDecisionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialDecision
     */
    select?: FinancialDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialDecision
     */
    omit?: FinancialDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDecisionInclude<ExtArgs> | null
    /**
     * The data needed to create a FinancialDecision.
     */
    data: XOR<FinancialDecisionCreateInput, FinancialDecisionUncheckedCreateInput>
  }

  /**
   * FinancialDecision createMany
   */
  export type FinancialDecisionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FinancialDecisions.
     */
    data: FinancialDecisionCreateManyInput | FinancialDecisionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FinancialDecision createManyAndReturn
   */
  export type FinancialDecisionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialDecision
     */
    select?: FinancialDecisionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialDecision
     */
    omit?: FinancialDecisionOmit<ExtArgs> | null
    /**
     * The data used to create many FinancialDecisions.
     */
    data: FinancialDecisionCreateManyInput | FinancialDecisionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDecisionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * FinancialDecision update
   */
  export type FinancialDecisionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialDecision
     */
    select?: FinancialDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialDecision
     */
    omit?: FinancialDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDecisionInclude<ExtArgs> | null
    /**
     * The data needed to update a FinancialDecision.
     */
    data: XOR<FinancialDecisionUpdateInput, FinancialDecisionUncheckedUpdateInput>
    /**
     * Choose, which FinancialDecision to update.
     */
    where: FinancialDecisionWhereUniqueInput
  }

  /**
   * FinancialDecision updateMany
   */
  export type FinancialDecisionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FinancialDecisions.
     */
    data: XOR<FinancialDecisionUpdateManyMutationInput, FinancialDecisionUncheckedUpdateManyInput>
    /**
     * Filter which FinancialDecisions to update
     */
    where?: FinancialDecisionWhereInput
    /**
     * Limit how many FinancialDecisions to update.
     */
    limit?: number
  }

  /**
   * FinancialDecision updateManyAndReturn
   */
  export type FinancialDecisionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialDecision
     */
    select?: FinancialDecisionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialDecision
     */
    omit?: FinancialDecisionOmit<ExtArgs> | null
    /**
     * The data used to update FinancialDecisions.
     */
    data: XOR<FinancialDecisionUpdateManyMutationInput, FinancialDecisionUncheckedUpdateManyInput>
    /**
     * Filter which FinancialDecisions to update
     */
    where?: FinancialDecisionWhereInput
    /**
     * Limit how many FinancialDecisions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDecisionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * FinancialDecision upsert
   */
  export type FinancialDecisionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialDecision
     */
    select?: FinancialDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialDecision
     */
    omit?: FinancialDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDecisionInclude<ExtArgs> | null
    /**
     * The filter to search for the FinancialDecision to update in case it exists.
     */
    where: FinancialDecisionWhereUniqueInput
    /**
     * In case the FinancialDecision found by the `where` argument doesn't exist, create a new FinancialDecision with this data.
     */
    create: XOR<FinancialDecisionCreateInput, FinancialDecisionUncheckedCreateInput>
    /**
     * In case the FinancialDecision was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FinancialDecisionUpdateInput, FinancialDecisionUncheckedUpdateInput>
  }

  /**
   * FinancialDecision delete
   */
  export type FinancialDecisionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialDecision
     */
    select?: FinancialDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialDecision
     */
    omit?: FinancialDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDecisionInclude<ExtArgs> | null
    /**
     * Filter which FinancialDecision to delete.
     */
    where: FinancialDecisionWhereUniqueInput
  }

  /**
   * FinancialDecision deleteMany
   */
  export type FinancialDecisionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FinancialDecisions to delete
     */
    where?: FinancialDecisionWhereInput
    /**
     * Limit how many FinancialDecisions to delete.
     */
    limit?: number
  }

  /**
   * FinancialDecision without action
   */
  export type FinancialDecisionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FinancialDecision
     */
    select?: FinancialDecisionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the FinancialDecision
     */
    omit?: FinancialDecisionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FinancialDecisionInclude<ExtArgs> | null
  }


  /**
   * Model ScenarioConfig
   */

  export type AggregateScenarioConfig = {
    _count: ScenarioConfigCountAggregateOutputType | null
    _avg: ScenarioConfigAvgAggregateOutputType | null
    _sum: ScenarioConfigSumAggregateOutputType | null
    _min: ScenarioConfigMinAggregateOutputType | null
    _max: ScenarioConfigMaxAggregateOutputType | null
  }

  export type ScenarioConfigAvgAggregateOutputType = {
    newRent: number | null
    jobSwitchSalary: number | null
    sipInvestment: number | null
    expenseGrowthRate: number | null
    projectionTimeframe: number | null
    oneTimeExpense: number | null
  }

  export type ScenarioConfigSumAggregateOutputType = {
    newRent: number | null
    jobSwitchSalary: number | null
    sipInvestment: number | null
    expenseGrowthRate: number | null
    projectionTimeframe: number | null
    oneTimeExpense: number | null
  }

  export type ScenarioConfigMinAggregateOutputType = {
    id: string | null
    name: string | null
    newRent: number | null
    jobSwitchSalary: number | null
    sipInvestment: number | null
    expenseGrowthRate: number | null
    projectionTimeframe: number | null
    oneTimeExpense: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type ScenarioConfigMaxAggregateOutputType = {
    id: string | null
    name: string | null
    newRent: number | null
    jobSwitchSalary: number | null
    sipInvestment: number | null
    expenseGrowthRate: number | null
    projectionTimeframe: number | null
    oneTimeExpense: number | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
  }

  export type ScenarioConfigCountAggregateOutputType = {
    id: number
    name: number
    newRent: number
    jobSwitchSalary: number
    sipInvestment: number
    expenseGrowthRate: number
    projectionTimeframe: number
    oneTimeExpense: number
    createdAt: number
    updatedAt: number
    userId: number
    _all: number
  }


  export type ScenarioConfigAvgAggregateInputType = {
    newRent?: true
    jobSwitchSalary?: true
    sipInvestment?: true
    expenseGrowthRate?: true
    projectionTimeframe?: true
    oneTimeExpense?: true
  }

  export type ScenarioConfigSumAggregateInputType = {
    newRent?: true
    jobSwitchSalary?: true
    sipInvestment?: true
    expenseGrowthRate?: true
    projectionTimeframe?: true
    oneTimeExpense?: true
  }

  export type ScenarioConfigMinAggregateInputType = {
    id?: true
    name?: true
    newRent?: true
    jobSwitchSalary?: true
    sipInvestment?: true
    expenseGrowthRate?: true
    projectionTimeframe?: true
    oneTimeExpense?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type ScenarioConfigMaxAggregateInputType = {
    id?: true
    name?: true
    newRent?: true
    jobSwitchSalary?: true
    sipInvestment?: true
    expenseGrowthRate?: true
    projectionTimeframe?: true
    oneTimeExpense?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
  }

  export type ScenarioConfigCountAggregateInputType = {
    id?: true
    name?: true
    newRent?: true
    jobSwitchSalary?: true
    sipInvestment?: true
    expenseGrowthRate?: true
    projectionTimeframe?: true
    oneTimeExpense?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    _all?: true
  }

  export type ScenarioConfigAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScenarioConfig to aggregate.
     */
    where?: ScenarioConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScenarioConfigs to fetch.
     */
    orderBy?: ScenarioConfigOrderByWithRelationInput | ScenarioConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ScenarioConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScenarioConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScenarioConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ScenarioConfigs
    **/
    _count?: true | ScenarioConfigCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ScenarioConfigAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ScenarioConfigSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ScenarioConfigMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ScenarioConfigMaxAggregateInputType
  }

  export type GetScenarioConfigAggregateType<T extends ScenarioConfigAggregateArgs> = {
        [P in keyof T & keyof AggregateScenarioConfig]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateScenarioConfig[P]>
      : GetScalarType<T[P], AggregateScenarioConfig[P]>
  }




  export type ScenarioConfigGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ScenarioConfigWhereInput
    orderBy?: ScenarioConfigOrderByWithAggregationInput | ScenarioConfigOrderByWithAggregationInput[]
    by: ScenarioConfigScalarFieldEnum[] | ScenarioConfigScalarFieldEnum
    having?: ScenarioConfigScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ScenarioConfigCountAggregateInputType | true
    _avg?: ScenarioConfigAvgAggregateInputType
    _sum?: ScenarioConfigSumAggregateInputType
    _min?: ScenarioConfigMinAggregateInputType
    _max?: ScenarioConfigMaxAggregateInputType
  }

  export type ScenarioConfigGroupByOutputType = {
    id: string
    name: string
    newRent: number | null
    jobSwitchSalary: number | null
    sipInvestment: number | null
    expenseGrowthRate: number | null
    projectionTimeframe: number
    oneTimeExpense: number | null
    createdAt: Date
    updatedAt: Date
    userId: string
    _count: ScenarioConfigCountAggregateOutputType | null
    _avg: ScenarioConfigAvgAggregateOutputType | null
    _sum: ScenarioConfigSumAggregateOutputType | null
    _min: ScenarioConfigMinAggregateOutputType | null
    _max: ScenarioConfigMaxAggregateOutputType | null
  }

  type GetScenarioConfigGroupByPayload<T extends ScenarioConfigGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ScenarioConfigGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ScenarioConfigGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ScenarioConfigGroupByOutputType[P]>
            : GetScalarType<T[P], ScenarioConfigGroupByOutputType[P]>
        }
      >
    >


  export type ScenarioConfigSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    newRent?: boolean
    jobSwitchSalary?: boolean
    sipInvestment?: boolean
    expenseGrowthRate?: boolean
    projectionTimeframe?: boolean
    oneTimeExpense?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scenarioConfig"]>

  export type ScenarioConfigSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    newRent?: boolean
    jobSwitchSalary?: boolean
    sipInvestment?: boolean
    expenseGrowthRate?: boolean
    projectionTimeframe?: boolean
    oneTimeExpense?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scenarioConfig"]>

  export type ScenarioConfigSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    newRent?: boolean
    jobSwitchSalary?: boolean
    sipInvestment?: boolean
    expenseGrowthRate?: boolean
    projectionTimeframe?: boolean
    oneTimeExpense?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["scenarioConfig"]>

  export type ScenarioConfigSelectScalar = {
    id?: boolean
    name?: boolean
    newRent?: boolean
    jobSwitchSalary?: boolean
    sipInvestment?: boolean
    expenseGrowthRate?: boolean
    projectionTimeframe?: boolean
    oneTimeExpense?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
  }

  export type ScenarioConfigOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "newRent" | "jobSwitchSalary" | "sipInvestment" | "expenseGrowthRate" | "projectionTimeframe" | "oneTimeExpense" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["scenarioConfig"]>
  export type ScenarioConfigInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ScenarioConfigIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ScenarioConfigIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ScenarioConfigPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ScenarioConfig"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      newRent: number | null
      jobSwitchSalary: number | null
      sipInvestment: number | null
      expenseGrowthRate: number | null
      projectionTimeframe: number
      oneTimeExpense: number | null
      createdAt: Date
      updatedAt: Date
      userId: string
    }, ExtArgs["result"]["scenarioConfig"]>
    composites: {}
  }

  type ScenarioConfigGetPayload<S extends boolean | null | undefined | ScenarioConfigDefaultArgs> = $Result.GetResult<Prisma.$ScenarioConfigPayload, S>

  type ScenarioConfigCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ScenarioConfigFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ScenarioConfigCountAggregateInputType | true
    }

  export interface ScenarioConfigDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ScenarioConfig'], meta: { name: 'ScenarioConfig' } }
    /**
     * Find zero or one ScenarioConfig that matches the filter.
     * @param {ScenarioConfigFindUniqueArgs} args - Arguments to find a ScenarioConfig
     * @example
     * // Get one ScenarioConfig
     * const scenarioConfig = await prisma.scenarioConfig.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ScenarioConfigFindUniqueArgs>(args: SelectSubset<T, ScenarioConfigFindUniqueArgs<ExtArgs>>): Prisma__ScenarioConfigClient<$Result.GetResult<Prisma.$ScenarioConfigPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ScenarioConfig that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ScenarioConfigFindUniqueOrThrowArgs} args - Arguments to find a ScenarioConfig
     * @example
     * // Get one ScenarioConfig
     * const scenarioConfig = await prisma.scenarioConfig.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ScenarioConfigFindUniqueOrThrowArgs>(args: SelectSubset<T, ScenarioConfigFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ScenarioConfigClient<$Result.GetResult<Prisma.$ScenarioConfigPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScenarioConfig that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScenarioConfigFindFirstArgs} args - Arguments to find a ScenarioConfig
     * @example
     * // Get one ScenarioConfig
     * const scenarioConfig = await prisma.scenarioConfig.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ScenarioConfigFindFirstArgs>(args?: SelectSubset<T, ScenarioConfigFindFirstArgs<ExtArgs>>): Prisma__ScenarioConfigClient<$Result.GetResult<Prisma.$ScenarioConfigPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ScenarioConfig that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScenarioConfigFindFirstOrThrowArgs} args - Arguments to find a ScenarioConfig
     * @example
     * // Get one ScenarioConfig
     * const scenarioConfig = await prisma.scenarioConfig.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ScenarioConfigFindFirstOrThrowArgs>(args?: SelectSubset<T, ScenarioConfigFindFirstOrThrowArgs<ExtArgs>>): Prisma__ScenarioConfigClient<$Result.GetResult<Prisma.$ScenarioConfigPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ScenarioConfigs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScenarioConfigFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ScenarioConfigs
     * const scenarioConfigs = await prisma.scenarioConfig.findMany()
     * 
     * // Get first 10 ScenarioConfigs
     * const scenarioConfigs = await prisma.scenarioConfig.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const scenarioConfigWithIdOnly = await prisma.scenarioConfig.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ScenarioConfigFindManyArgs>(args?: SelectSubset<T, ScenarioConfigFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScenarioConfigPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ScenarioConfig.
     * @param {ScenarioConfigCreateArgs} args - Arguments to create a ScenarioConfig.
     * @example
     * // Create one ScenarioConfig
     * const ScenarioConfig = await prisma.scenarioConfig.create({
     *   data: {
     *     // ... data to create a ScenarioConfig
     *   }
     * })
     * 
     */
    create<T extends ScenarioConfigCreateArgs>(args: SelectSubset<T, ScenarioConfigCreateArgs<ExtArgs>>): Prisma__ScenarioConfigClient<$Result.GetResult<Prisma.$ScenarioConfigPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ScenarioConfigs.
     * @param {ScenarioConfigCreateManyArgs} args - Arguments to create many ScenarioConfigs.
     * @example
     * // Create many ScenarioConfigs
     * const scenarioConfig = await prisma.scenarioConfig.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ScenarioConfigCreateManyArgs>(args?: SelectSubset<T, ScenarioConfigCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ScenarioConfigs and returns the data saved in the database.
     * @param {ScenarioConfigCreateManyAndReturnArgs} args - Arguments to create many ScenarioConfigs.
     * @example
     * // Create many ScenarioConfigs
     * const scenarioConfig = await prisma.scenarioConfig.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ScenarioConfigs and only return the `id`
     * const scenarioConfigWithIdOnly = await prisma.scenarioConfig.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ScenarioConfigCreateManyAndReturnArgs>(args?: SelectSubset<T, ScenarioConfigCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScenarioConfigPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ScenarioConfig.
     * @param {ScenarioConfigDeleteArgs} args - Arguments to delete one ScenarioConfig.
     * @example
     * // Delete one ScenarioConfig
     * const ScenarioConfig = await prisma.scenarioConfig.delete({
     *   where: {
     *     // ... filter to delete one ScenarioConfig
     *   }
     * })
     * 
     */
    delete<T extends ScenarioConfigDeleteArgs>(args: SelectSubset<T, ScenarioConfigDeleteArgs<ExtArgs>>): Prisma__ScenarioConfigClient<$Result.GetResult<Prisma.$ScenarioConfigPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ScenarioConfig.
     * @param {ScenarioConfigUpdateArgs} args - Arguments to update one ScenarioConfig.
     * @example
     * // Update one ScenarioConfig
     * const scenarioConfig = await prisma.scenarioConfig.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ScenarioConfigUpdateArgs>(args: SelectSubset<T, ScenarioConfigUpdateArgs<ExtArgs>>): Prisma__ScenarioConfigClient<$Result.GetResult<Prisma.$ScenarioConfigPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ScenarioConfigs.
     * @param {ScenarioConfigDeleteManyArgs} args - Arguments to filter ScenarioConfigs to delete.
     * @example
     * // Delete a few ScenarioConfigs
     * const { count } = await prisma.scenarioConfig.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ScenarioConfigDeleteManyArgs>(args?: SelectSubset<T, ScenarioConfigDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScenarioConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScenarioConfigUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ScenarioConfigs
     * const scenarioConfig = await prisma.scenarioConfig.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ScenarioConfigUpdateManyArgs>(args: SelectSubset<T, ScenarioConfigUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ScenarioConfigs and returns the data updated in the database.
     * @param {ScenarioConfigUpdateManyAndReturnArgs} args - Arguments to update many ScenarioConfigs.
     * @example
     * // Update many ScenarioConfigs
     * const scenarioConfig = await prisma.scenarioConfig.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ScenarioConfigs and only return the `id`
     * const scenarioConfigWithIdOnly = await prisma.scenarioConfig.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ScenarioConfigUpdateManyAndReturnArgs>(args: SelectSubset<T, ScenarioConfigUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ScenarioConfigPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ScenarioConfig.
     * @param {ScenarioConfigUpsertArgs} args - Arguments to update or create a ScenarioConfig.
     * @example
     * // Update or create a ScenarioConfig
     * const scenarioConfig = await prisma.scenarioConfig.upsert({
     *   create: {
     *     // ... data to create a ScenarioConfig
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ScenarioConfig we want to update
     *   }
     * })
     */
    upsert<T extends ScenarioConfigUpsertArgs>(args: SelectSubset<T, ScenarioConfigUpsertArgs<ExtArgs>>): Prisma__ScenarioConfigClient<$Result.GetResult<Prisma.$ScenarioConfigPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ScenarioConfigs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScenarioConfigCountArgs} args - Arguments to filter ScenarioConfigs to count.
     * @example
     * // Count the number of ScenarioConfigs
     * const count = await prisma.scenarioConfig.count({
     *   where: {
     *     // ... the filter for the ScenarioConfigs we want to count
     *   }
     * })
    **/
    count<T extends ScenarioConfigCountArgs>(
      args?: Subset<T, ScenarioConfigCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ScenarioConfigCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ScenarioConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScenarioConfigAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ScenarioConfigAggregateArgs>(args: Subset<T, ScenarioConfigAggregateArgs>): Prisma.PrismaPromise<GetScenarioConfigAggregateType<T>>

    /**
     * Group by ScenarioConfig.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ScenarioConfigGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ScenarioConfigGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ScenarioConfigGroupByArgs['orderBy'] }
        : { orderBy?: ScenarioConfigGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ScenarioConfigGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetScenarioConfigGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ScenarioConfig model
   */
  readonly fields: ScenarioConfigFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ScenarioConfig.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ScenarioConfigClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ScenarioConfig model
   */
  interface ScenarioConfigFieldRefs {
    readonly id: FieldRef<"ScenarioConfig", 'String'>
    readonly name: FieldRef<"ScenarioConfig", 'String'>
    readonly newRent: FieldRef<"ScenarioConfig", 'Float'>
    readonly jobSwitchSalary: FieldRef<"ScenarioConfig", 'Float'>
    readonly sipInvestment: FieldRef<"ScenarioConfig", 'Float'>
    readonly expenseGrowthRate: FieldRef<"ScenarioConfig", 'Float'>
    readonly projectionTimeframe: FieldRef<"ScenarioConfig", 'Int'>
    readonly oneTimeExpense: FieldRef<"ScenarioConfig", 'Float'>
    readonly createdAt: FieldRef<"ScenarioConfig", 'DateTime'>
    readonly updatedAt: FieldRef<"ScenarioConfig", 'DateTime'>
    readonly userId: FieldRef<"ScenarioConfig", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ScenarioConfig findUnique
   */
  export type ScenarioConfigFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScenarioConfig
     */
    select?: ScenarioConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScenarioConfig
     */
    omit?: ScenarioConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScenarioConfigInclude<ExtArgs> | null
    /**
     * Filter, which ScenarioConfig to fetch.
     */
    where: ScenarioConfigWhereUniqueInput
  }

  /**
   * ScenarioConfig findUniqueOrThrow
   */
  export type ScenarioConfigFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScenarioConfig
     */
    select?: ScenarioConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScenarioConfig
     */
    omit?: ScenarioConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScenarioConfigInclude<ExtArgs> | null
    /**
     * Filter, which ScenarioConfig to fetch.
     */
    where: ScenarioConfigWhereUniqueInput
  }

  /**
   * ScenarioConfig findFirst
   */
  export type ScenarioConfigFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScenarioConfig
     */
    select?: ScenarioConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScenarioConfig
     */
    omit?: ScenarioConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScenarioConfigInclude<ExtArgs> | null
    /**
     * Filter, which ScenarioConfig to fetch.
     */
    where?: ScenarioConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScenarioConfigs to fetch.
     */
    orderBy?: ScenarioConfigOrderByWithRelationInput | ScenarioConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScenarioConfigs.
     */
    cursor?: ScenarioConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScenarioConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScenarioConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScenarioConfigs.
     */
    distinct?: ScenarioConfigScalarFieldEnum | ScenarioConfigScalarFieldEnum[]
  }

  /**
   * ScenarioConfig findFirstOrThrow
   */
  export type ScenarioConfigFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScenarioConfig
     */
    select?: ScenarioConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScenarioConfig
     */
    omit?: ScenarioConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScenarioConfigInclude<ExtArgs> | null
    /**
     * Filter, which ScenarioConfig to fetch.
     */
    where?: ScenarioConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScenarioConfigs to fetch.
     */
    orderBy?: ScenarioConfigOrderByWithRelationInput | ScenarioConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ScenarioConfigs.
     */
    cursor?: ScenarioConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScenarioConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScenarioConfigs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ScenarioConfigs.
     */
    distinct?: ScenarioConfigScalarFieldEnum | ScenarioConfigScalarFieldEnum[]
  }

  /**
   * ScenarioConfig findMany
   */
  export type ScenarioConfigFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScenarioConfig
     */
    select?: ScenarioConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScenarioConfig
     */
    omit?: ScenarioConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScenarioConfigInclude<ExtArgs> | null
    /**
     * Filter, which ScenarioConfigs to fetch.
     */
    where?: ScenarioConfigWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ScenarioConfigs to fetch.
     */
    orderBy?: ScenarioConfigOrderByWithRelationInput | ScenarioConfigOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ScenarioConfigs.
     */
    cursor?: ScenarioConfigWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ScenarioConfigs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ScenarioConfigs.
     */
    skip?: number
    distinct?: ScenarioConfigScalarFieldEnum | ScenarioConfigScalarFieldEnum[]
  }

  /**
   * ScenarioConfig create
   */
  export type ScenarioConfigCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScenarioConfig
     */
    select?: ScenarioConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScenarioConfig
     */
    omit?: ScenarioConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScenarioConfigInclude<ExtArgs> | null
    /**
     * The data needed to create a ScenarioConfig.
     */
    data: XOR<ScenarioConfigCreateInput, ScenarioConfigUncheckedCreateInput>
  }

  /**
   * ScenarioConfig createMany
   */
  export type ScenarioConfigCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ScenarioConfigs.
     */
    data: ScenarioConfigCreateManyInput | ScenarioConfigCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ScenarioConfig createManyAndReturn
   */
  export type ScenarioConfigCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScenarioConfig
     */
    select?: ScenarioConfigSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScenarioConfig
     */
    omit?: ScenarioConfigOmit<ExtArgs> | null
    /**
     * The data used to create many ScenarioConfigs.
     */
    data: ScenarioConfigCreateManyInput | ScenarioConfigCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScenarioConfigIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScenarioConfig update
   */
  export type ScenarioConfigUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScenarioConfig
     */
    select?: ScenarioConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScenarioConfig
     */
    omit?: ScenarioConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScenarioConfigInclude<ExtArgs> | null
    /**
     * The data needed to update a ScenarioConfig.
     */
    data: XOR<ScenarioConfigUpdateInput, ScenarioConfigUncheckedUpdateInput>
    /**
     * Choose, which ScenarioConfig to update.
     */
    where: ScenarioConfigWhereUniqueInput
  }

  /**
   * ScenarioConfig updateMany
   */
  export type ScenarioConfigUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ScenarioConfigs.
     */
    data: XOR<ScenarioConfigUpdateManyMutationInput, ScenarioConfigUncheckedUpdateManyInput>
    /**
     * Filter which ScenarioConfigs to update
     */
    where?: ScenarioConfigWhereInput
    /**
     * Limit how many ScenarioConfigs to update.
     */
    limit?: number
  }

  /**
   * ScenarioConfig updateManyAndReturn
   */
  export type ScenarioConfigUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScenarioConfig
     */
    select?: ScenarioConfigSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ScenarioConfig
     */
    omit?: ScenarioConfigOmit<ExtArgs> | null
    /**
     * The data used to update ScenarioConfigs.
     */
    data: XOR<ScenarioConfigUpdateManyMutationInput, ScenarioConfigUncheckedUpdateManyInput>
    /**
     * Filter which ScenarioConfigs to update
     */
    where?: ScenarioConfigWhereInput
    /**
     * Limit how many ScenarioConfigs to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScenarioConfigIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ScenarioConfig upsert
   */
  export type ScenarioConfigUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScenarioConfig
     */
    select?: ScenarioConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScenarioConfig
     */
    omit?: ScenarioConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScenarioConfigInclude<ExtArgs> | null
    /**
     * The filter to search for the ScenarioConfig to update in case it exists.
     */
    where: ScenarioConfigWhereUniqueInput
    /**
     * In case the ScenarioConfig found by the `where` argument doesn't exist, create a new ScenarioConfig with this data.
     */
    create: XOR<ScenarioConfigCreateInput, ScenarioConfigUncheckedCreateInput>
    /**
     * In case the ScenarioConfig was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ScenarioConfigUpdateInput, ScenarioConfigUncheckedUpdateInput>
  }

  /**
   * ScenarioConfig delete
   */
  export type ScenarioConfigDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScenarioConfig
     */
    select?: ScenarioConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScenarioConfig
     */
    omit?: ScenarioConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScenarioConfigInclude<ExtArgs> | null
    /**
     * Filter which ScenarioConfig to delete.
     */
    where: ScenarioConfigWhereUniqueInput
  }

  /**
   * ScenarioConfig deleteMany
   */
  export type ScenarioConfigDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ScenarioConfigs to delete
     */
    where?: ScenarioConfigWhereInput
    /**
     * Limit how many ScenarioConfigs to delete.
     */
    limit?: number
  }

  /**
   * ScenarioConfig without action
   */
  export type ScenarioConfigDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ScenarioConfig
     */
    select?: ScenarioConfigSelect<ExtArgs> | null
    /**
     * Omit specific fields from the ScenarioConfig
     */
    omit?: ScenarioConfigOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ScenarioConfigInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    email: 'email',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FinancialDataScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    monthlySalary: 'monthlySalary',
    freelanceIncome: 'freelanceIncome',
    rent: 'rent',
    utilities: 'utilities',
    groceries: 'groceries',
    subscriptions: 'subscriptions',
    miscellaneous: 'miscellaneous',
    totalDebt: 'totalDebt',
    monthlyEMI: 'monthlyEMI',
    emergencyFund: 'emergencyFund',
    otherSavings: 'otherSavings',
    sipMonthly: 'sipMonthly',
    lumpSumInvestment: 'lumpSumInvestment',
    overallScore: 'overallScore',
    emergencyFundScore: 'emergencyFundScore',
    debtRatioScore: 'debtRatioScore',
    investmentAllocationScore: 'investmentAllocationScore',
    userId: 'userId'
  };

  export type FinancialDataScalarFieldEnum = (typeof FinancialDataScalarFieldEnum)[keyof typeof FinancialDataScalarFieldEnum]


  export const HistoricalDataScalarFieldEnum: {
    id: 'id',
    month: 'month',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    monthlySalary: 'monthlySalary',
    freelanceIncome: 'freelanceIncome',
    rent: 'rent',
    utilities: 'utilities',
    groceries: 'groceries',
    subscriptions: 'subscriptions',
    miscellaneous: 'miscellaneous',
    totalDebt: 'totalDebt',
    monthlyEMI: 'monthlyEMI',
    emergencyFund: 'emergencyFund',
    otherSavings: 'otherSavings',
    sipMonthly: 'sipMonthly',
    lumpSumInvestment: 'lumpSumInvestment',
    userId: 'userId'
  };

  export type HistoricalDataScalarFieldEnum = (typeof HistoricalDataScalarFieldEnum)[keyof typeof HistoricalDataScalarFieldEnum]


  export const FinancialDecisionScalarFieldEnum: {
    id: 'id',
    title: 'title',
    amount: 'amount',
    date: 'date',
    category: 'category',
    alternativeOption: 'alternativeOption',
    expectedReturn: 'expectedReturn',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type FinancialDecisionScalarFieldEnum = (typeof FinancialDecisionScalarFieldEnum)[keyof typeof FinancialDecisionScalarFieldEnum]


  export const ScenarioConfigScalarFieldEnum: {
    id: 'id',
    name: 'name',
    newRent: 'newRent',
    jobSwitchSalary: 'jobSwitchSalary',
    sipInvestment: 'sipInvestment',
    expenseGrowthRate: 'expenseGrowthRate',
    projectionTimeframe: 'projectionTimeframe',
    oneTimeExpense: 'oneTimeExpense',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId'
  };

  export type ScenarioConfigScalarFieldEnum = (typeof ScenarioConfigScalarFieldEnum)[keyof typeof ScenarioConfigScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    financialData?: XOR<FinancialDataNullableScalarRelationFilter, FinancialDataWhereInput> | null
    historicalData?: HistoricalDataListRelationFilter
    financialDecisions?: FinancialDecisionListRelationFilter
    scenarioConfigs?: ScenarioConfigListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    financialData?: FinancialDataOrderByWithRelationInput
    historicalData?: HistoricalDataOrderByRelationAggregateInput
    financialDecisions?: FinancialDecisionOrderByRelationAggregateInput
    scenarioConfigs?: ScenarioConfigOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    createdAt?: DateTimeFilter<"User"> | Date | string
    updatedAt?: DateTimeFilter<"User"> | Date | string
    financialData?: XOR<FinancialDataNullableScalarRelationFilter, FinancialDataWhereInput> | null
    historicalData?: HistoricalDataListRelationFilter
    financialDecisions?: FinancialDecisionListRelationFilter
    scenarioConfigs?: ScenarioConfigListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"User"> | Date | string
  }

  export type FinancialDataWhereInput = {
    AND?: FinancialDataWhereInput | FinancialDataWhereInput[]
    OR?: FinancialDataWhereInput[]
    NOT?: FinancialDataWhereInput | FinancialDataWhereInput[]
    id?: StringFilter<"FinancialData"> | string
    createdAt?: DateTimeFilter<"FinancialData"> | Date | string
    updatedAt?: DateTimeFilter<"FinancialData"> | Date | string
    monthlySalary?: FloatFilter<"FinancialData"> | number
    freelanceIncome?: FloatFilter<"FinancialData"> | number
    rent?: FloatFilter<"FinancialData"> | number
    utilities?: FloatFilter<"FinancialData"> | number
    groceries?: FloatFilter<"FinancialData"> | number
    subscriptions?: FloatFilter<"FinancialData"> | number
    miscellaneous?: FloatFilter<"FinancialData"> | number
    totalDebt?: FloatFilter<"FinancialData"> | number
    monthlyEMI?: FloatFilter<"FinancialData"> | number
    emergencyFund?: FloatFilter<"FinancialData"> | number
    otherSavings?: FloatFilter<"FinancialData"> | number
    sipMonthly?: FloatFilter<"FinancialData"> | number
    lumpSumInvestment?: FloatFilter<"FinancialData"> | number
    overallScore?: IntNullableFilter<"FinancialData"> | number | null
    emergencyFundScore?: IntNullableFilter<"FinancialData"> | number | null
    debtRatioScore?: IntNullableFilter<"FinancialData"> | number | null
    investmentAllocationScore?: IntNullableFilter<"FinancialData"> | number | null
    userId?: StringFilter<"FinancialData"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FinancialDataOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    monthlySalary?: SortOrder
    freelanceIncome?: SortOrder
    rent?: SortOrder
    utilities?: SortOrder
    groceries?: SortOrder
    subscriptions?: SortOrder
    miscellaneous?: SortOrder
    totalDebt?: SortOrder
    monthlyEMI?: SortOrder
    emergencyFund?: SortOrder
    otherSavings?: SortOrder
    sipMonthly?: SortOrder
    lumpSumInvestment?: SortOrder
    overallScore?: SortOrderInput | SortOrder
    emergencyFundScore?: SortOrderInput | SortOrder
    debtRatioScore?: SortOrderInput | SortOrder
    investmentAllocationScore?: SortOrderInput | SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FinancialDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: FinancialDataWhereInput | FinancialDataWhereInput[]
    OR?: FinancialDataWhereInput[]
    NOT?: FinancialDataWhereInput | FinancialDataWhereInput[]
    createdAt?: DateTimeFilter<"FinancialData"> | Date | string
    updatedAt?: DateTimeFilter<"FinancialData"> | Date | string
    monthlySalary?: FloatFilter<"FinancialData"> | number
    freelanceIncome?: FloatFilter<"FinancialData"> | number
    rent?: FloatFilter<"FinancialData"> | number
    utilities?: FloatFilter<"FinancialData"> | number
    groceries?: FloatFilter<"FinancialData"> | number
    subscriptions?: FloatFilter<"FinancialData"> | number
    miscellaneous?: FloatFilter<"FinancialData"> | number
    totalDebt?: FloatFilter<"FinancialData"> | number
    monthlyEMI?: FloatFilter<"FinancialData"> | number
    emergencyFund?: FloatFilter<"FinancialData"> | number
    otherSavings?: FloatFilter<"FinancialData"> | number
    sipMonthly?: FloatFilter<"FinancialData"> | number
    lumpSumInvestment?: FloatFilter<"FinancialData"> | number
    overallScore?: IntNullableFilter<"FinancialData"> | number | null
    emergencyFundScore?: IntNullableFilter<"FinancialData"> | number | null
    debtRatioScore?: IntNullableFilter<"FinancialData"> | number | null
    investmentAllocationScore?: IntNullableFilter<"FinancialData"> | number | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type FinancialDataOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    monthlySalary?: SortOrder
    freelanceIncome?: SortOrder
    rent?: SortOrder
    utilities?: SortOrder
    groceries?: SortOrder
    subscriptions?: SortOrder
    miscellaneous?: SortOrder
    totalDebt?: SortOrder
    monthlyEMI?: SortOrder
    emergencyFund?: SortOrder
    otherSavings?: SortOrder
    sipMonthly?: SortOrder
    lumpSumInvestment?: SortOrder
    overallScore?: SortOrderInput | SortOrder
    emergencyFundScore?: SortOrderInput | SortOrder
    debtRatioScore?: SortOrderInput | SortOrder
    investmentAllocationScore?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: FinancialDataCountOrderByAggregateInput
    _avg?: FinancialDataAvgOrderByAggregateInput
    _max?: FinancialDataMaxOrderByAggregateInput
    _min?: FinancialDataMinOrderByAggregateInput
    _sum?: FinancialDataSumOrderByAggregateInput
  }

  export type FinancialDataScalarWhereWithAggregatesInput = {
    AND?: FinancialDataScalarWhereWithAggregatesInput | FinancialDataScalarWhereWithAggregatesInput[]
    OR?: FinancialDataScalarWhereWithAggregatesInput[]
    NOT?: FinancialDataScalarWhereWithAggregatesInput | FinancialDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FinancialData"> | string
    createdAt?: DateTimeWithAggregatesFilter<"FinancialData"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FinancialData"> | Date | string
    monthlySalary?: FloatWithAggregatesFilter<"FinancialData"> | number
    freelanceIncome?: FloatWithAggregatesFilter<"FinancialData"> | number
    rent?: FloatWithAggregatesFilter<"FinancialData"> | number
    utilities?: FloatWithAggregatesFilter<"FinancialData"> | number
    groceries?: FloatWithAggregatesFilter<"FinancialData"> | number
    subscriptions?: FloatWithAggregatesFilter<"FinancialData"> | number
    miscellaneous?: FloatWithAggregatesFilter<"FinancialData"> | number
    totalDebt?: FloatWithAggregatesFilter<"FinancialData"> | number
    monthlyEMI?: FloatWithAggregatesFilter<"FinancialData"> | number
    emergencyFund?: FloatWithAggregatesFilter<"FinancialData"> | number
    otherSavings?: FloatWithAggregatesFilter<"FinancialData"> | number
    sipMonthly?: FloatWithAggregatesFilter<"FinancialData"> | number
    lumpSumInvestment?: FloatWithAggregatesFilter<"FinancialData"> | number
    overallScore?: IntNullableWithAggregatesFilter<"FinancialData"> | number | null
    emergencyFundScore?: IntNullableWithAggregatesFilter<"FinancialData"> | number | null
    debtRatioScore?: IntNullableWithAggregatesFilter<"FinancialData"> | number | null
    investmentAllocationScore?: IntNullableWithAggregatesFilter<"FinancialData"> | number | null
    userId?: StringWithAggregatesFilter<"FinancialData"> | string
  }

  export type HistoricalDataWhereInput = {
    AND?: HistoricalDataWhereInput | HistoricalDataWhereInput[]
    OR?: HistoricalDataWhereInput[]
    NOT?: HistoricalDataWhereInput | HistoricalDataWhereInput[]
    id?: StringFilter<"HistoricalData"> | string
    month?: DateTimeFilter<"HistoricalData"> | Date | string
    createdAt?: DateTimeFilter<"HistoricalData"> | Date | string
    updatedAt?: DateTimeFilter<"HistoricalData"> | Date | string
    monthlySalary?: FloatFilter<"HistoricalData"> | number
    freelanceIncome?: FloatFilter<"HistoricalData"> | number
    rent?: FloatFilter<"HistoricalData"> | number
    utilities?: FloatFilter<"HistoricalData"> | number
    groceries?: FloatFilter<"HistoricalData"> | number
    subscriptions?: FloatFilter<"HistoricalData"> | number
    miscellaneous?: FloatFilter<"HistoricalData"> | number
    totalDebt?: FloatFilter<"HistoricalData"> | number
    monthlyEMI?: FloatFilter<"HistoricalData"> | number
    emergencyFund?: FloatFilter<"HistoricalData"> | number
    otherSavings?: FloatFilter<"HistoricalData"> | number
    sipMonthly?: FloatFilter<"HistoricalData"> | number
    lumpSumInvestment?: FloatFilter<"HistoricalData"> | number
    userId?: StringFilter<"HistoricalData"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type HistoricalDataOrderByWithRelationInput = {
    id?: SortOrder
    month?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    monthlySalary?: SortOrder
    freelanceIncome?: SortOrder
    rent?: SortOrder
    utilities?: SortOrder
    groceries?: SortOrder
    subscriptions?: SortOrder
    miscellaneous?: SortOrder
    totalDebt?: SortOrder
    monthlyEMI?: SortOrder
    emergencyFund?: SortOrder
    otherSavings?: SortOrder
    sipMonthly?: SortOrder
    lumpSumInvestment?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type HistoricalDataWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId_month?: HistoricalDataUserIdMonthCompoundUniqueInput
    AND?: HistoricalDataWhereInput | HistoricalDataWhereInput[]
    OR?: HistoricalDataWhereInput[]
    NOT?: HistoricalDataWhereInput | HistoricalDataWhereInput[]
    month?: DateTimeFilter<"HistoricalData"> | Date | string
    createdAt?: DateTimeFilter<"HistoricalData"> | Date | string
    updatedAt?: DateTimeFilter<"HistoricalData"> | Date | string
    monthlySalary?: FloatFilter<"HistoricalData"> | number
    freelanceIncome?: FloatFilter<"HistoricalData"> | number
    rent?: FloatFilter<"HistoricalData"> | number
    utilities?: FloatFilter<"HistoricalData"> | number
    groceries?: FloatFilter<"HistoricalData"> | number
    subscriptions?: FloatFilter<"HistoricalData"> | number
    miscellaneous?: FloatFilter<"HistoricalData"> | number
    totalDebt?: FloatFilter<"HistoricalData"> | number
    monthlyEMI?: FloatFilter<"HistoricalData"> | number
    emergencyFund?: FloatFilter<"HistoricalData"> | number
    otherSavings?: FloatFilter<"HistoricalData"> | number
    sipMonthly?: FloatFilter<"HistoricalData"> | number
    lumpSumInvestment?: FloatFilter<"HistoricalData"> | number
    userId?: StringFilter<"HistoricalData"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId_month">

  export type HistoricalDataOrderByWithAggregationInput = {
    id?: SortOrder
    month?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    monthlySalary?: SortOrder
    freelanceIncome?: SortOrder
    rent?: SortOrder
    utilities?: SortOrder
    groceries?: SortOrder
    subscriptions?: SortOrder
    miscellaneous?: SortOrder
    totalDebt?: SortOrder
    monthlyEMI?: SortOrder
    emergencyFund?: SortOrder
    otherSavings?: SortOrder
    sipMonthly?: SortOrder
    lumpSumInvestment?: SortOrder
    userId?: SortOrder
    _count?: HistoricalDataCountOrderByAggregateInput
    _avg?: HistoricalDataAvgOrderByAggregateInput
    _max?: HistoricalDataMaxOrderByAggregateInput
    _min?: HistoricalDataMinOrderByAggregateInput
    _sum?: HistoricalDataSumOrderByAggregateInput
  }

  export type HistoricalDataScalarWhereWithAggregatesInput = {
    AND?: HistoricalDataScalarWhereWithAggregatesInput | HistoricalDataScalarWhereWithAggregatesInput[]
    OR?: HistoricalDataScalarWhereWithAggregatesInput[]
    NOT?: HistoricalDataScalarWhereWithAggregatesInput | HistoricalDataScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HistoricalData"> | string
    month?: DateTimeWithAggregatesFilter<"HistoricalData"> | Date | string
    createdAt?: DateTimeWithAggregatesFilter<"HistoricalData"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HistoricalData"> | Date | string
    monthlySalary?: FloatWithAggregatesFilter<"HistoricalData"> | number
    freelanceIncome?: FloatWithAggregatesFilter<"HistoricalData"> | number
    rent?: FloatWithAggregatesFilter<"HistoricalData"> | number
    utilities?: FloatWithAggregatesFilter<"HistoricalData"> | number
    groceries?: FloatWithAggregatesFilter<"HistoricalData"> | number
    subscriptions?: FloatWithAggregatesFilter<"HistoricalData"> | number
    miscellaneous?: FloatWithAggregatesFilter<"HistoricalData"> | number
    totalDebt?: FloatWithAggregatesFilter<"HistoricalData"> | number
    monthlyEMI?: FloatWithAggregatesFilter<"HistoricalData"> | number
    emergencyFund?: FloatWithAggregatesFilter<"HistoricalData"> | number
    otherSavings?: FloatWithAggregatesFilter<"HistoricalData"> | number
    sipMonthly?: FloatWithAggregatesFilter<"HistoricalData"> | number
    lumpSumInvestment?: FloatWithAggregatesFilter<"HistoricalData"> | number
    userId?: StringWithAggregatesFilter<"HistoricalData"> | string
  }

  export type FinancialDecisionWhereInput = {
    AND?: FinancialDecisionWhereInput | FinancialDecisionWhereInput[]
    OR?: FinancialDecisionWhereInput[]
    NOT?: FinancialDecisionWhereInput | FinancialDecisionWhereInput[]
    id?: StringFilter<"FinancialDecision"> | string
    title?: StringFilter<"FinancialDecision"> | string
    amount?: FloatFilter<"FinancialDecision"> | number
    date?: DateTimeFilter<"FinancialDecision"> | Date | string
    category?: StringFilter<"FinancialDecision"> | string
    alternativeOption?: StringNullableFilter<"FinancialDecision"> | string | null
    expectedReturn?: FloatNullableFilter<"FinancialDecision"> | number | null
    createdAt?: DateTimeFilter<"FinancialDecision"> | Date | string
    updatedAt?: DateTimeFilter<"FinancialDecision"> | Date | string
    userId?: StringFilter<"FinancialDecision"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type FinancialDecisionOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    category?: SortOrder
    alternativeOption?: SortOrderInput | SortOrder
    expectedReturn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type FinancialDecisionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FinancialDecisionWhereInput | FinancialDecisionWhereInput[]
    OR?: FinancialDecisionWhereInput[]
    NOT?: FinancialDecisionWhereInput | FinancialDecisionWhereInput[]
    title?: StringFilter<"FinancialDecision"> | string
    amount?: FloatFilter<"FinancialDecision"> | number
    date?: DateTimeFilter<"FinancialDecision"> | Date | string
    category?: StringFilter<"FinancialDecision"> | string
    alternativeOption?: StringNullableFilter<"FinancialDecision"> | string | null
    expectedReturn?: FloatNullableFilter<"FinancialDecision"> | number | null
    createdAt?: DateTimeFilter<"FinancialDecision"> | Date | string
    updatedAt?: DateTimeFilter<"FinancialDecision"> | Date | string
    userId?: StringFilter<"FinancialDecision"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type FinancialDecisionOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    category?: SortOrder
    alternativeOption?: SortOrderInput | SortOrder
    expectedReturn?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: FinancialDecisionCountOrderByAggregateInput
    _avg?: FinancialDecisionAvgOrderByAggregateInput
    _max?: FinancialDecisionMaxOrderByAggregateInput
    _min?: FinancialDecisionMinOrderByAggregateInput
    _sum?: FinancialDecisionSumOrderByAggregateInput
  }

  export type FinancialDecisionScalarWhereWithAggregatesInput = {
    AND?: FinancialDecisionScalarWhereWithAggregatesInput | FinancialDecisionScalarWhereWithAggregatesInput[]
    OR?: FinancialDecisionScalarWhereWithAggregatesInput[]
    NOT?: FinancialDecisionScalarWhereWithAggregatesInput | FinancialDecisionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"FinancialDecision"> | string
    title?: StringWithAggregatesFilter<"FinancialDecision"> | string
    amount?: FloatWithAggregatesFilter<"FinancialDecision"> | number
    date?: DateTimeWithAggregatesFilter<"FinancialDecision"> | Date | string
    category?: StringWithAggregatesFilter<"FinancialDecision"> | string
    alternativeOption?: StringNullableWithAggregatesFilter<"FinancialDecision"> | string | null
    expectedReturn?: FloatNullableWithAggregatesFilter<"FinancialDecision"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"FinancialDecision"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"FinancialDecision"> | Date | string
    userId?: StringWithAggregatesFilter<"FinancialDecision"> | string
  }

  export type ScenarioConfigWhereInput = {
    AND?: ScenarioConfigWhereInput | ScenarioConfigWhereInput[]
    OR?: ScenarioConfigWhereInput[]
    NOT?: ScenarioConfigWhereInput | ScenarioConfigWhereInput[]
    id?: StringFilter<"ScenarioConfig"> | string
    name?: StringFilter<"ScenarioConfig"> | string
    newRent?: FloatNullableFilter<"ScenarioConfig"> | number | null
    jobSwitchSalary?: FloatNullableFilter<"ScenarioConfig"> | number | null
    sipInvestment?: FloatNullableFilter<"ScenarioConfig"> | number | null
    expenseGrowthRate?: FloatNullableFilter<"ScenarioConfig"> | number | null
    projectionTimeframe?: IntFilter<"ScenarioConfig"> | number
    oneTimeExpense?: FloatNullableFilter<"ScenarioConfig"> | number | null
    createdAt?: DateTimeFilter<"ScenarioConfig"> | Date | string
    updatedAt?: DateTimeFilter<"ScenarioConfig"> | Date | string
    userId?: StringFilter<"ScenarioConfig"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ScenarioConfigOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    newRent?: SortOrderInput | SortOrder
    jobSwitchSalary?: SortOrderInput | SortOrder
    sipInvestment?: SortOrderInput | SortOrder
    expenseGrowthRate?: SortOrderInput | SortOrder
    projectionTimeframe?: SortOrder
    oneTimeExpense?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ScenarioConfigWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ScenarioConfigWhereInput | ScenarioConfigWhereInput[]
    OR?: ScenarioConfigWhereInput[]
    NOT?: ScenarioConfigWhereInput | ScenarioConfigWhereInput[]
    name?: StringFilter<"ScenarioConfig"> | string
    newRent?: FloatNullableFilter<"ScenarioConfig"> | number | null
    jobSwitchSalary?: FloatNullableFilter<"ScenarioConfig"> | number | null
    sipInvestment?: FloatNullableFilter<"ScenarioConfig"> | number | null
    expenseGrowthRate?: FloatNullableFilter<"ScenarioConfig"> | number | null
    projectionTimeframe?: IntFilter<"ScenarioConfig"> | number
    oneTimeExpense?: FloatNullableFilter<"ScenarioConfig"> | number | null
    createdAt?: DateTimeFilter<"ScenarioConfig"> | Date | string
    updatedAt?: DateTimeFilter<"ScenarioConfig"> | Date | string
    userId?: StringFilter<"ScenarioConfig"> | string
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id">

  export type ScenarioConfigOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    newRent?: SortOrderInput | SortOrder
    jobSwitchSalary?: SortOrderInput | SortOrder
    sipInvestment?: SortOrderInput | SortOrder
    expenseGrowthRate?: SortOrderInput | SortOrder
    projectionTimeframe?: SortOrder
    oneTimeExpense?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    _count?: ScenarioConfigCountOrderByAggregateInput
    _avg?: ScenarioConfigAvgOrderByAggregateInput
    _max?: ScenarioConfigMaxOrderByAggregateInput
    _min?: ScenarioConfigMinOrderByAggregateInput
    _sum?: ScenarioConfigSumOrderByAggregateInput
  }

  export type ScenarioConfigScalarWhereWithAggregatesInput = {
    AND?: ScenarioConfigScalarWhereWithAggregatesInput | ScenarioConfigScalarWhereWithAggregatesInput[]
    OR?: ScenarioConfigScalarWhereWithAggregatesInput[]
    NOT?: ScenarioConfigScalarWhereWithAggregatesInput | ScenarioConfigScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ScenarioConfig"> | string
    name?: StringWithAggregatesFilter<"ScenarioConfig"> | string
    newRent?: FloatNullableWithAggregatesFilter<"ScenarioConfig"> | number | null
    jobSwitchSalary?: FloatNullableWithAggregatesFilter<"ScenarioConfig"> | number | null
    sipInvestment?: FloatNullableWithAggregatesFilter<"ScenarioConfig"> | number | null
    expenseGrowthRate?: FloatNullableWithAggregatesFilter<"ScenarioConfig"> | number | null
    projectionTimeframe?: IntWithAggregatesFilter<"ScenarioConfig"> | number
    oneTimeExpense?: FloatNullableWithAggregatesFilter<"ScenarioConfig"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"ScenarioConfig"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ScenarioConfig"> | Date | string
    userId?: StringWithAggregatesFilter<"ScenarioConfig"> | string
  }

  export type UserCreateInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    financialData?: FinancialDataCreateNestedOneWithoutUserInput
    historicalData?: HistoricalDataCreateNestedManyWithoutUserInput
    financialDecisions?: FinancialDecisionCreateNestedManyWithoutUserInput
    scenarioConfigs?: ScenarioConfigCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    financialData?: FinancialDataUncheckedCreateNestedOneWithoutUserInput
    historicalData?: HistoricalDataUncheckedCreateNestedManyWithoutUserInput
    financialDecisions?: FinancialDecisionUncheckedCreateNestedManyWithoutUserInput
    scenarioConfigs?: ScenarioConfigUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    financialData?: FinancialDataUpdateOneWithoutUserNestedInput
    historicalData?: HistoricalDataUpdateManyWithoutUserNestedInput
    financialDecisions?: FinancialDecisionUpdateManyWithoutUserNestedInput
    scenarioConfigs?: ScenarioConfigUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    financialData?: FinancialDataUncheckedUpdateOneWithoutUserNestedInput
    historicalData?: HistoricalDataUncheckedUpdateManyWithoutUserNestedInput
    financialDecisions?: FinancialDecisionUncheckedUpdateManyWithoutUserNestedInput
    scenarioConfigs?: ScenarioConfigUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialDataCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    monthlySalary?: number
    freelanceIncome?: number
    rent?: number
    utilities?: number
    groceries?: number
    subscriptions?: number
    miscellaneous?: number
    totalDebt?: number
    monthlyEMI?: number
    emergencyFund?: number
    otherSavings?: number
    sipMonthly?: number
    lumpSumInvestment?: number
    overallScore?: number | null
    emergencyFundScore?: number | null
    debtRatioScore?: number | null
    investmentAllocationScore?: number | null
    user: UserCreateNestedOneWithoutFinancialDataInput
  }

  export type FinancialDataUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    monthlySalary?: number
    freelanceIncome?: number
    rent?: number
    utilities?: number
    groceries?: number
    subscriptions?: number
    miscellaneous?: number
    totalDebt?: number
    monthlyEMI?: number
    emergencyFund?: number
    otherSavings?: number
    sipMonthly?: number
    lumpSumInvestment?: number
    overallScore?: number | null
    emergencyFundScore?: number | null
    debtRatioScore?: number | null
    investmentAllocationScore?: number | null
    userId: string
  }

  export type FinancialDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlySalary?: FloatFieldUpdateOperationsInput | number
    freelanceIncome?: FloatFieldUpdateOperationsInput | number
    rent?: FloatFieldUpdateOperationsInput | number
    utilities?: FloatFieldUpdateOperationsInput | number
    groceries?: FloatFieldUpdateOperationsInput | number
    subscriptions?: FloatFieldUpdateOperationsInput | number
    miscellaneous?: FloatFieldUpdateOperationsInput | number
    totalDebt?: FloatFieldUpdateOperationsInput | number
    monthlyEMI?: FloatFieldUpdateOperationsInput | number
    emergencyFund?: FloatFieldUpdateOperationsInput | number
    otherSavings?: FloatFieldUpdateOperationsInput | number
    sipMonthly?: FloatFieldUpdateOperationsInput | number
    lumpSumInvestment?: FloatFieldUpdateOperationsInput | number
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    emergencyFundScore?: NullableIntFieldUpdateOperationsInput | number | null
    debtRatioScore?: NullableIntFieldUpdateOperationsInput | number | null
    investmentAllocationScore?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutFinancialDataNestedInput
  }

  export type FinancialDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlySalary?: FloatFieldUpdateOperationsInput | number
    freelanceIncome?: FloatFieldUpdateOperationsInput | number
    rent?: FloatFieldUpdateOperationsInput | number
    utilities?: FloatFieldUpdateOperationsInput | number
    groceries?: FloatFieldUpdateOperationsInput | number
    subscriptions?: FloatFieldUpdateOperationsInput | number
    miscellaneous?: FloatFieldUpdateOperationsInput | number
    totalDebt?: FloatFieldUpdateOperationsInput | number
    monthlyEMI?: FloatFieldUpdateOperationsInput | number
    emergencyFund?: FloatFieldUpdateOperationsInput | number
    otherSavings?: FloatFieldUpdateOperationsInput | number
    sipMonthly?: FloatFieldUpdateOperationsInput | number
    lumpSumInvestment?: FloatFieldUpdateOperationsInput | number
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    emergencyFundScore?: NullableIntFieldUpdateOperationsInput | number | null
    debtRatioScore?: NullableIntFieldUpdateOperationsInput | number | null
    investmentAllocationScore?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FinancialDataCreateManyInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    monthlySalary?: number
    freelanceIncome?: number
    rent?: number
    utilities?: number
    groceries?: number
    subscriptions?: number
    miscellaneous?: number
    totalDebt?: number
    monthlyEMI?: number
    emergencyFund?: number
    otherSavings?: number
    sipMonthly?: number
    lumpSumInvestment?: number
    overallScore?: number | null
    emergencyFundScore?: number | null
    debtRatioScore?: number | null
    investmentAllocationScore?: number | null
    userId: string
  }

  export type FinancialDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlySalary?: FloatFieldUpdateOperationsInput | number
    freelanceIncome?: FloatFieldUpdateOperationsInput | number
    rent?: FloatFieldUpdateOperationsInput | number
    utilities?: FloatFieldUpdateOperationsInput | number
    groceries?: FloatFieldUpdateOperationsInput | number
    subscriptions?: FloatFieldUpdateOperationsInput | number
    miscellaneous?: FloatFieldUpdateOperationsInput | number
    totalDebt?: FloatFieldUpdateOperationsInput | number
    monthlyEMI?: FloatFieldUpdateOperationsInput | number
    emergencyFund?: FloatFieldUpdateOperationsInput | number
    otherSavings?: FloatFieldUpdateOperationsInput | number
    sipMonthly?: FloatFieldUpdateOperationsInput | number
    lumpSumInvestment?: FloatFieldUpdateOperationsInput | number
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    emergencyFundScore?: NullableIntFieldUpdateOperationsInput | number | null
    debtRatioScore?: NullableIntFieldUpdateOperationsInput | number | null
    investmentAllocationScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FinancialDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlySalary?: FloatFieldUpdateOperationsInput | number
    freelanceIncome?: FloatFieldUpdateOperationsInput | number
    rent?: FloatFieldUpdateOperationsInput | number
    utilities?: FloatFieldUpdateOperationsInput | number
    groceries?: FloatFieldUpdateOperationsInput | number
    subscriptions?: FloatFieldUpdateOperationsInput | number
    miscellaneous?: FloatFieldUpdateOperationsInput | number
    totalDebt?: FloatFieldUpdateOperationsInput | number
    monthlyEMI?: FloatFieldUpdateOperationsInput | number
    emergencyFund?: FloatFieldUpdateOperationsInput | number
    otherSavings?: FloatFieldUpdateOperationsInput | number
    sipMonthly?: FloatFieldUpdateOperationsInput | number
    lumpSumInvestment?: FloatFieldUpdateOperationsInput | number
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    emergencyFundScore?: NullableIntFieldUpdateOperationsInput | number | null
    debtRatioScore?: NullableIntFieldUpdateOperationsInput | number | null
    investmentAllocationScore?: NullableIntFieldUpdateOperationsInput | number | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type HistoricalDataCreateInput = {
    id?: string
    month: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    monthlySalary?: number
    freelanceIncome?: number
    rent?: number
    utilities?: number
    groceries?: number
    subscriptions?: number
    miscellaneous?: number
    totalDebt?: number
    monthlyEMI?: number
    emergencyFund?: number
    otherSavings?: number
    sipMonthly?: number
    lumpSumInvestment?: number
    user: UserCreateNestedOneWithoutHistoricalDataInput
  }

  export type HistoricalDataUncheckedCreateInput = {
    id?: string
    month: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    monthlySalary?: number
    freelanceIncome?: number
    rent?: number
    utilities?: number
    groceries?: number
    subscriptions?: number
    miscellaneous?: number
    totalDebt?: number
    monthlyEMI?: number
    emergencyFund?: number
    otherSavings?: number
    sipMonthly?: number
    lumpSumInvestment?: number
    userId: string
  }

  export type HistoricalDataUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlySalary?: FloatFieldUpdateOperationsInput | number
    freelanceIncome?: FloatFieldUpdateOperationsInput | number
    rent?: FloatFieldUpdateOperationsInput | number
    utilities?: FloatFieldUpdateOperationsInput | number
    groceries?: FloatFieldUpdateOperationsInput | number
    subscriptions?: FloatFieldUpdateOperationsInput | number
    miscellaneous?: FloatFieldUpdateOperationsInput | number
    totalDebt?: FloatFieldUpdateOperationsInput | number
    monthlyEMI?: FloatFieldUpdateOperationsInput | number
    emergencyFund?: FloatFieldUpdateOperationsInput | number
    otherSavings?: FloatFieldUpdateOperationsInput | number
    sipMonthly?: FloatFieldUpdateOperationsInput | number
    lumpSumInvestment?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutHistoricalDataNestedInput
  }

  export type HistoricalDataUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlySalary?: FloatFieldUpdateOperationsInput | number
    freelanceIncome?: FloatFieldUpdateOperationsInput | number
    rent?: FloatFieldUpdateOperationsInput | number
    utilities?: FloatFieldUpdateOperationsInput | number
    groceries?: FloatFieldUpdateOperationsInput | number
    subscriptions?: FloatFieldUpdateOperationsInput | number
    miscellaneous?: FloatFieldUpdateOperationsInput | number
    totalDebt?: FloatFieldUpdateOperationsInput | number
    monthlyEMI?: FloatFieldUpdateOperationsInput | number
    emergencyFund?: FloatFieldUpdateOperationsInput | number
    otherSavings?: FloatFieldUpdateOperationsInput | number
    sipMonthly?: FloatFieldUpdateOperationsInput | number
    lumpSumInvestment?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type HistoricalDataCreateManyInput = {
    id?: string
    month: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    monthlySalary?: number
    freelanceIncome?: number
    rent?: number
    utilities?: number
    groceries?: number
    subscriptions?: number
    miscellaneous?: number
    totalDebt?: number
    monthlyEMI?: number
    emergencyFund?: number
    otherSavings?: number
    sipMonthly?: number
    lumpSumInvestment?: number
    userId: string
  }

  export type HistoricalDataUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlySalary?: FloatFieldUpdateOperationsInput | number
    freelanceIncome?: FloatFieldUpdateOperationsInput | number
    rent?: FloatFieldUpdateOperationsInput | number
    utilities?: FloatFieldUpdateOperationsInput | number
    groceries?: FloatFieldUpdateOperationsInput | number
    subscriptions?: FloatFieldUpdateOperationsInput | number
    miscellaneous?: FloatFieldUpdateOperationsInput | number
    totalDebt?: FloatFieldUpdateOperationsInput | number
    monthlyEMI?: FloatFieldUpdateOperationsInput | number
    emergencyFund?: FloatFieldUpdateOperationsInput | number
    otherSavings?: FloatFieldUpdateOperationsInput | number
    sipMonthly?: FloatFieldUpdateOperationsInput | number
    lumpSumInvestment?: FloatFieldUpdateOperationsInput | number
  }

  export type HistoricalDataUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlySalary?: FloatFieldUpdateOperationsInput | number
    freelanceIncome?: FloatFieldUpdateOperationsInput | number
    rent?: FloatFieldUpdateOperationsInput | number
    utilities?: FloatFieldUpdateOperationsInput | number
    groceries?: FloatFieldUpdateOperationsInput | number
    subscriptions?: FloatFieldUpdateOperationsInput | number
    miscellaneous?: FloatFieldUpdateOperationsInput | number
    totalDebt?: FloatFieldUpdateOperationsInput | number
    monthlyEMI?: FloatFieldUpdateOperationsInput | number
    emergencyFund?: FloatFieldUpdateOperationsInput | number
    otherSavings?: FloatFieldUpdateOperationsInput | number
    sipMonthly?: FloatFieldUpdateOperationsInput | number
    lumpSumInvestment?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FinancialDecisionCreateInput = {
    id?: string
    title: string
    amount: number
    date: Date | string
    category: string
    alternativeOption?: string | null
    expectedReturn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutFinancialDecisionsInput
  }

  export type FinancialDecisionUncheckedCreateInput = {
    id?: string
    title: string
    amount: number
    date: Date | string
    category: string
    alternativeOption?: string | null
    expectedReturn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type FinancialDecisionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    alternativeOption?: NullableStringFieldUpdateOperationsInput | string | null
    expectedReturn?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutFinancialDecisionsNestedInput
  }

  export type FinancialDecisionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    alternativeOption?: NullableStringFieldUpdateOperationsInput | string | null
    expectedReturn?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FinancialDecisionCreateManyInput = {
    id?: string
    title: string
    amount: number
    date: Date | string
    category: string
    alternativeOption?: string | null
    expectedReturn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type FinancialDecisionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    alternativeOption?: NullableStringFieldUpdateOperationsInput | string | null
    expectedReturn?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialDecisionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    alternativeOption?: NullableStringFieldUpdateOperationsInput | string | null
    expectedReturn?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ScenarioConfigCreateInput = {
    id?: string
    name: string
    newRent?: number | null
    jobSwitchSalary?: number | null
    sipInvestment?: number | null
    expenseGrowthRate?: number | null
    projectionTimeframe: number
    oneTimeExpense?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    user: UserCreateNestedOneWithoutScenarioConfigsInput
  }

  export type ScenarioConfigUncheckedCreateInput = {
    id?: string
    name: string
    newRent?: number | null
    jobSwitchSalary?: number | null
    sipInvestment?: number | null
    expenseGrowthRate?: number | null
    projectionTimeframe: number
    oneTimeExpense?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type ScenarioConfigUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    newRent?: NullableFloatFieldUpdateOperationsInput | number | null
    jobSwitchSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    sipInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    expenseGrowthRate?: NullableFloatFieldUpdateOperationsInput | number | null
    projectionTimeframe?: IntFieldUpdateOperationsInput | number
    oneTimeExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutScenarioConfigsNestedInput
  }

  export type ScenarioConfigUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    newRent?: NullableFloatFieldUpdateOperationsInput | number | null
    jobSwitchSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    sipInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    expenseGrowthRate?: NullableFloatFieldUpdateOperationsInput | number | null
    projectionTimeframe?: IntFieldUpdateOperationsInput | number
    oneTimeExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ScenarioConfigCreateManyInput = {
    id?: string
    name: string
    newRent?: number | null
    jobSwitchSalary?: number | null
    sipInvestment?: number | null
    expenseGrowthRate?: number | null
    projectionTimeframe: number
    oneTimeExpense?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
  }

  export type ScenarioConfigUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    newRent?: NullableFloatFieldUpdateOperationsInput | number | null
    jobSwitchSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    sipInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    expenseGrowthRate?: NullableFloatFieldUpdateOperationsInput | number | null
    projectionTimeframe?: IntFieldUpdateOperationsInput | number
    oneTimeExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScenarioConfigUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    newRent?: NullableFloatFieldUpdateOperationsInput | number | null
    jobSwitchSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    sipInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    expenseGrowthRate?: NullableFloatFieldUpdateOperationsInput | number | null
    projectionTimeframe?: IntFieldUpdateOperationsInput | number
    oneTimeExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FinancialDataNullableScalarRelationFilter = {
    is?: FinancialDataWhereInput | null
    isNot?: FinancialDataWhereInput | null
  }

  export type HistoricalDataListRelationFilter = {
    every?: HistoricalDataWhereInput
    some?: HistoricalDataWhereInput
    none?: HistoricalDataWhereInput
  }

  export type FinancialDecisionListRelationFilter = {
    every?: FinancialDecisionWhereInput
    some?: FinancialDecisionWhereInput
    none?: FinancialDecisionWhereInput
  }

  export type ScenarioConfigListRelationFilter = {
    every?: ScenarioConfigWhereInput
    some?: ScenarioConfigWhereInput
    none?: ScenarioConfigWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type HistoricalDataOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FinancialDecisionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ScenarioConfigOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FinancialDataCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    monthlySalary?: SortOrder
    freelanceIncome?: SortOrder
    rent?: SortOrder
    utilities?: SortOrder
    groceries?: SortOrder
    subscriptions?: SortOrder
    miscellaneous?: SortOrder
    totalDebt?: SortOrder
    monthlyEMI?: SortOrder
    emergencyFund?: SortOrder
    otherSavings?: SortOrder
    sipMonthly?: SortOrder
    lumpSumInvestment?: SortOrder
    overallScore?: SortOrder
    emergencyFundScore?: SortOrder
    debtRatioScore?: SortOrder
    investmentAllocationScore?: SortOrder
    userId?: SortOrder
  }

  export type FinancialDataAvgOrderByAggregateInput = {
    monthlySalary?: SortOrder
    freelanceIncome?: SortOrder
    rent?: SortOrder
    utilities?: SortOrder
    groceries?: SortOrder
    subscriptions?: SortOrder
    miscellaneous?: SortOrder
    totalDebt?: SortOrder
    monthlyEMI?: SortOrder
    emergencyFund?: SortOrder
    otherSavings?: SortOrder
    sipMonthly?: SortOrder
    lumpSumInvestment?: SortOrder
    overallScore?: SortOrder
    emergencyFundScore?: SortOrder
    debtRatioScore?: SortOrder
    investmentAllocationScore?: SortOrder
  }

  export type FinancialDataMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    monthlySalary?: SortOrder
    freelanceIncome?: SortOrder
    rent?: SortOrder
    utilities?: SortOrder
    groceries?: SortOrder
    subscriptions?: SortOrder
    miscellaneous?: SortOrder
    totalDebt?: SortOrder
    monthlyEMI?: SortOrder
    emergencyFund?: SortOrder
    otherSavings?: SortOrder
    sipMonthly?: SortOrder
    lumpSumInvestment?: SortOrder
    overallScore?: SortOrder
    emergencyFundScore?: SortOrder
    debtRatioScore?: SortOrder
    investmentAllocationScore?: SortOrder
    userId?: SortOrder
  }

  export type FinancialDataMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    monthlySalary?: SortOrder
    freelanceIncome?: SortOrder
    rent?: SortOrder
    utilities?: SortOrder
    groceries?: SortOrder
    subscriptions?: SortOrder
    miscellaneous?: SortOrder
    totalDebt?: SortOrder
    monthlyEMI?: SortOrder
    emergencyFund?: SortOrder
    otherSavings?: SortOrder
    sipMonthly?: SortOrder
    lumpSumInvestment?: SortOrder
    overallScore?: SortOrder
    emergencyFundScore?: SortOrder
    debtRatioScore?: SortOrder
    investmentAllocationScore?: SortOrder
    userId?: SortOrder
  }

  export type FinancialDataSumOrderByAggregateInput = {
    monthlySalary?: SortOrder
    freelanceIncome?: SortOrder
    rent?: SortOrder
    utilities?: SortOrder
    groceries?: SortOrder
    subscriptions?: SortOrder
    miscellaneous?: SortOrder
    totalDebt?: SortOrder
    monthlyEMI?: SortOrder
    emergencyFund?: SortOrder
    otherSavings?: SortOrder
    sipMonthly?: SortOrder
    lumpSumInvestment?: SortOrder
    overallScore?: SortOrder
    emergencyFundScore?: SortOrder
    debtRatioScore?: SortOrder
    investmentAllocationScore?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type HistoricalDataUserIdMonthCompoundUniqueInput = {
    userId: string
    month: Date | string
  }

  export type HistoricalDataCountOrderByAggregateInput = {
    id?: SortOrder
    month?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    monthlySalary?: SortOrder
    freelanceIncome?: SortOrder
    rent?: SortOrder
    utilities?: SortOrder
    groceries?: SortOrder
    subscriptions?: SortOrder
    miscellaneous?: SortOrder
    totalDebt?: SortOrder
    monthlyEMI?: SortOrder
    emergencyFund?: SortOrder
    otherSavings?: SortOrder
    sipMonthly?: SortOrder
    lumpSumInvestment?: SortOrder
    userId?: SortOrder
  }

  export type HistoricalDataAvgOrderByAggregateInput = {
    monthlySalary?: SortOrder
    freelanceIncome?: SortOrder
    rent?: SortOrder
    utilities?: SortOrder
    groceries?: SortOrder
    subscriptions?: SortOrder
    miscellaneous?: SortOrder
    totalDebt?: SortOrder
    monthlyEMI?: SortOrder
    emergencyFund?: SortOrder
    otherSavings?: SortOrder
    sipMonthly?: SortOrder
    lumpSumInvestment?: SortOrder
  }

  export type HistoricalDataMaxOrderByAggregateInput = {
    id?: SortOrder
    month?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    monthlySalary?: SortOrder
    freelanceIncome?: SortOrder
    rent?: SortOrder
    utilities?: SortOrder
    groceries?: SortOrder
    subscriptions?: SortOrder
    miscellaneous?: SortOrder
    totalDebt?: SortOrder
    monthlyEMI?: SortOrder
    emergencyFund?: SortOrder
    otherSavings?: SortOrder
    sipMonthly?: SortOrder
    lumpSumInvestment?: SortOrder
    userId?: SortOrder
  }

  export type HistoricalDataMinOrderByAggregateInput = {
    id?: SortOrder
    month?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    monthlySalary?: SortOrder
    freelanceIncome?: SortOrder
    rent?: SortOrder
    utilities?: SortOrder
    groceries?: SortOrder
    subscriptions?: SortOrder
    miscellaneous?: SortOrder
    totalDebt?: SortOrder
    monthlyEMI?: SortOrder
    emergencyFund?: SortOrder
    otherSavings?: SortOrder
    sipMonthly?: SortOrder
    lumpSumInvestment?: SortOrder
    userId?: SortOrder
  }

  export type HistoricalDataSumOrderByAggregateInput = {
    monthlySalary?: SortOrder
    freelanceIncome?: SortOrder
    rent?: SortOrder
    utilities?: SortOrder
    groceries?: SortOrder
    subscriptions?: SortOrder
    miscellaneous?: SortOrder
    totalDebt?: SortOrder
    monthlyEMI?: SortOrder
    emergencyFund?: SortOrder
    otherSavings?: SortOrder
    sipMonthly?: SortOrder
    lumpSumInvestment?: SortOrder
  }

  export type FloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type FinancialDecisionCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    category?: SortOrder
    alternativeOption?: SortOrder
    expectedReturn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type FinancialDecisionAvgOrderByAggregateInput = {
    amount?: SortOrder
    expectedReturn?: SortOrder
  }

  export type FinancialDecisionMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    category?: SortOrder
    alternativeOption?: SortOrder
    expectedReturn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type FinancialDecisionMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    amount?: SortOrder
    date?: SortOrder
    category?: SortOrder
    alternativeOption?: SortOrder
    expectedReturn?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type FinancialDecisionSumOrderByAggregateInput = {
    amount?: SortOrder
    expectedReturn?: SortOrder
  }

  export type FloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ScenarioConfigCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    newRent?: SortOrder
    jobSwitchSalary?: SortOrder
    sipInvestment?: SortOrder
    expenseGrowthRate?: SortOrder
    projectionTimeframe?: SortOrder
    oneTimeExpense?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type ScenarioConfigAvgOrderByAggregateInput = {
    newRent?: SortOrder
    jobSwitchSalary?: SortOrder
    sipInvestment?: SortOrder
    expenseGrowthRate?: SortOrder
    projectionTimeframe?: SortOrder
    oneTimeExpense?: SortOrder
  }

  export type ScenarioConfigMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    newRent?: SortOrder
    jobSwitchSalary?: SortOrder
    sipInvestment?: SortOrder
    expenseGrowthRate?: SortOrder
    projectionTimeframe?: SortOrder
    oneTimeExpense?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type ScenarioConfigMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    newRent?: SortOrder
    jobSwitchSalary?: SortOrder
    sipInvestment?: SortOrder
    expenseGrowthRate?: SortOrder
    projectionTimeframe?: SortOrder
    oneTimeExpense?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
  }

  export type ScenarioConfigSumOrderByAggregateInput = {
    newRent?: SortOrder
    jobSwitchSalary?: SortOrder
    sipInvestment?: SortOrder
    expenseGrowthRate?: SortOrder
    projectionTimeframe?: SortOrder
    oneTimeExpense?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FinancialDataCreateNestedOneWithoutUserInput = {
    create?: XOR<FinancialDataCreateWithoutUserInput, FinancialDataUncheckedCreateWithoutUserInput>
    connectOrCreate?: FinancialDataCreateOrConnectWithoutUserInput
    connect?: FinancialDataWhereUniqueInput
  }

  export type HistoricalDataCreateNestedManyWithoutUserInput = {
    create?: XOR<HistoricalDataCreateWithoutUserInput, HistoricalDataUncheckedCreateWithoutUserInput> | HistoricalDataCreateWithoutUserInput[] | HistoricalDataUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoricalDataCreateOrConnectWithoutUserInput | HistoricalDataCreateOrConnectWithoutUserInput[]
    createMany?: HistoricalDataCreateManyUserInputEnvelope
    connect?: HistoricalDataWhereUniqueInput | HistoricalDataWhereUniqueInput[]
  }

  export type FinancialDecisionCreateNestedManyWithoutUserInput = {
    create?: XOR<FinancialDecisionCreateWithoutUserInput, FinancialDecisionUncheckedCreateWithoutUserInput> | FinancialDecisionCreateWithoutUserInput[] | FinancialDecisionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FinancialDecisionCreateOrConnectWithoutUserInput | FinancialDecisionCreateOrConnectWithoutUserInput[]
    createMany?: FinancialDecisionCreateManyUserInputEnvelope
    connect?: FinancialDecisionWhereUniqueInput | FinancialDecisionWhereUniqueInput[]
  }

  export type ScenarioConfigCreateNestedManyWithoutUserInput = {
    create?: XOR<ScenarioConfigCreateWithoutUserInput, ScenarioConfigUncheckedCreateWithoutUserInput> | ScenarioConfigCreateWithoutUserInput[] | ScenarioConfigUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScenarioConfigCreateOrConnectWithoutUserInput | ScenarioConfigCreateOrConnectWithoutUserInput[]
    createMany?: ScenarioConfigCreateManyUserInputEnvelope
    connect?: ScenarioConfigWhereUniqueInput | ScenarioConfigWhereUniqueInput[]
  }

  export type FinancialDataUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<FinancialDataCreateWithoutUserInput, FinancialDataUncheckedCreateWithoutUserInput>
    connectOrCreate?: FinancialDataCreateOrConnectWithoutUserInput
    connect?: FinancialDataWhereUniqueInput
  }

  export type HistoricalDataUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<HistoricalDataCreateWithoutUserInput, HistoricalDataUncheckedCreateWithoutUserInput> | HistoricalDataCreateWithoutUserInput[] | HistoricalDataUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoricalDataCreateOrConnectWithoutUserInput | HistoricalDataCreateOrConnectWithoutUserInput[]
    createMany?: HistoricalDataCreateManyUserInputEnvelope
    connect?: HistoricalDataWhereUniqueInput | HistoricalDataWhereUniqueInput[]
  }

  export type FinancialDecisionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FinancialDecisionCreateWithoutUserInput, FinancialDecisionUncheckedCreateWithoutUserInput> | FinancialDecisionCreateWithoutUserInput[] | FinancialDecisionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FinancialDecisionCreateOrConnectWithoutUserInput | FinancialDecisionCreateOrConnectWithoutUserInput[]
    createMany?: FinancialDecisionCreateManyUserInputEnvelope
    connect?: FinancialDecisionWhereUniqueInput | FinancialDecisionWhereUniqueInput[]
  }

  export type ScenarioConfigUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ScenarioConfigCreateWithoutUserInput, ScenarioConfigUncheckedCreateWithoutUserInput> | ScenarioConfigCreateWithoutUserInput[] | ScenarioConfigUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScenarioConfigCreateOrConnectWithoutUserInput | ScenarioConfigCreateOrConnectWithoutUserInput[]
    createMany?: ScenarioConfigCreateManyUserInputEnvelope
    connect?: ScenarioConfigWhereUniqueInput | ScenarioConfigWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FinancialDataUpdateOneWithoutUserNestedInput = {
    create?: XOR<FinancialDataCreateWithoutUserInput, FinancialDataUncheckedCreateWithoutUserInput>
    connectOrCreate?: FinancialDataCreateOrConnectWithoutUserInput
    upsert?: FinancialDataUpsertWithoutUserInput
    disconnect?: FinancialDataWhereInput | boolean
    delete?: FinancialDataWhereInput | boolean
    connect?: FinancialDataWhereUniqueInput
    update?: XOR<XOR<FinancialDataUpdateToOneWithWhereWithoutUserInput, FinancialDataUpdateWithoutUserInput>, FinancialDataUncheckedUpdateWithoutUserInput>
  }

  export type HistoricalDataUpdateManyWithoutUserNestedInput = {
    create?: XOR<HistoricalDataCreateWithoutUserInput, HistoricalDataUncheckedCreateWithoutUserInput> | HistoricalDataCreateWithoutUserInput[] | HistoricalDataUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoricalDataCreateOrConnectWithoutUserInput | HistoricalDataCreateOrConnectWithoutUserInput[]
    upsert?: HistoricalDataUpsertWithWhereUniqueWithoutUserInput | HistoricalDataUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HistoricalDataCreateManyUserInputEnvelope
    set?: HistoricalDataWhereUniqueInput | HistoricalDataWhereUniqueInput[]
    disconnect?: HistoricalDataWhereUniqueInput | HistoricalDataWhereUniqueInput[]
    delete?: HistoricalDataWhereUniqueInput | HistoricalDataWhereUniqueInput[]
    connect?: HistoricalDataWhereUniqueInput | HistoricalDataWhereUniqueInput[]
    update?: HistoricalDataUpdateWithWhereUniqueWithoutUserInput | HistoricalDataUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HistoricalDataUpdateManyWithWhereWithoutUserInput | HistoricalDataUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HistoricalDataScalarWhereInput | HistoricalDataScalarWhereInput[]
  }

  export type FinancialDecisionUpdateManyWithoutUserNestedInput = {
    create?: XOR<FinancialDecisionCreateWithoutUserInput, FinancialDecisionUncheckedCreateWithoutUserInput> | FinancialDecisionCreateWithoutUserInput[] | FinancialDecisionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FinancialDecisionCreateOrConnectWithoutUserInput | FinancialDecisionCreateOrConnectWithoutUserInput[]
    upsert?: FinancialDecisionUpsertWithWhereUniqueWithoutUserInput | FinancialDecisionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FinancialDecisionCreateManyUserInputEnvelope
    set?: FinancialDecisionWhereUniqueInput | FinancialDecisionWhereUniqueInput[]
    disconnect?: FinancialDecisionWhereUniqueInput | FinancialDecisionWhereUniqueInput[]
    delete?: FinancialDecisionWhereUniqueInput | FinancialDecisionWhereUniqueInput[]
    connect?: FinancialDecisionWhereUniqueInput | FinancialDecisionWhereUniqueInput[]
    update?: FinancialDecisionUpdateWithWhereUniqueWithoutUserInput | FinancialDecisionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FinancialDecisionUpdateManyWithWhereWithoutUserInput | FinancialDecisionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FinancialDecisionScalarWhereInput | FinancialDecisionScalarWhereInput[]
  }

  export type ScenarioConfigUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScenarioConfigCreateWithoutUserInput, ScenarioConfigUncheckedCreateWithoutUserInput> | ScenarioConfigCreateWithoutUserInput[] | ScenarioConfigUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScenarioConfigCreateOrConnectWithoutUserInput | ScenarioConfigCreateOrConnectWithoutUserInput[]
    upsert?: ScenarioConfigUpsertWithWhereUniqueWithoutUserInput | ScenarioConfigUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScenarioConfigCreateManyUserInputEnvelope
    set?: ScenarioConfigWhereUniqueInput | ScenarioConfigWhereUniqueInput[]
    disconnect?: ScenarioConfigWhereUniqueInput | ScenarioConfigWhereUniqueInput[]
    delete?: ScenarioConfigWhereUniqueInput | ScenarioConfigWhereUniqueInput[]
    connect?: ScenarioConfigWhereUniqueInput | ScenarioConfigWhereUniqueInput[]
    update?: ScenarioConfigUpdateWithWhereUniqueWithoutUserInput | ScenarioConfigUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScenarioConfigUpdateManyWithWhereWithoutUserInput | ScenarioConfigUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScenarioConfigScalarWhereInput | ScenarioConfigScalarWhereInput[]
  }

  export type FinancialDataUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<FinancialDataCreateWithoutUserInput, FinancialDataUncheckedCreateWithoutUserInput>
    connectOrCreate?: FinancialDataCreateOrConnectWithoutUserInput
    upsert?: FinancialDataUpsertWithoutUserInput
    disconnect?: FinancialDataWhereInput | boolean
    delete?: FinancialDataWhereInput | boolean
    connect?: FinancialDataWhereUniqueInput
    update?: XOR<XOR<FinancialDataUpdateToOneWithWhereWithoutUserInput, FinancialDataUpdateWithoutUserInput>, FinancialDataUncheckedUpdateWithoutUserInput>
  }

  export type HistoricalDataUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<HistoricalDataCreateWithoutUserInput, HistoricalDataUncheckedCreateWithoutUserInput> | HistoricalDataCreateWithoutUserInput[] | HistoricalDataUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoricalDataCreateOrConnectWithoutUserInput | HistoricalDataCreateOrConnectWithoutUserInput[]
    upsert?: HistoricalDataUpsertWithWhereUniqueWithoutUserInput | HistoricalDataUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HistoricalDataCreateManyUserInputEnvelope
    set?: HistoricalDataWhereUniqueInput | HistoricalDataWhereUniqueInput[]
    disconnect?: HistoricalDataWhereUniqueInput | HistoricalDataWhereUniqueInput[]
    delete?: HistoricalDataWhereUniqueInput | HistoricalDataWhereUniqueInput[]
    connect?: HistoricalDataWhereUniqueInput | HistoricalDataWhereUniqueInput[]
    update?: HistoricalDataUpdateWithWhereUniqueWithoutUserInput | HistoricalDataUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HistoricalDataUpdateManyWithWhereWithoutUserInput | HistoricalDataUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HistoricalDataScalarWhereInput | HistoricalDataScalarWhereInput[]
  }

  export type FinancialDecisionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FinancialDecisionCreateWithoutUserInput, FinancialDecisionUncheckedCreateWithoutUserInput> | FinancialDecisionCreateWithoutUserInput[] | FinancialDecisionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FinancialDecisionCreateOrConnectWithoutUserInput | FinancialDecisionCreateOrConnectWithoutUserInput[]
    upsert?: FinancialDecisionUpsertWithWhereUniqueWithoutUserInput | FinancialDecisionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FinancialDecisionCreateManyUserInputEnvelope
    set?: FinancialDecisionWhereUniqueInput | FinancialDecisionWhereUniqueInput[]
    disconnect?: FinancialDecisionWhereUniqueInput | FinancialDecisionWhereUniqueInput[]
    delete?: FinancialDecisionWhereUniqueInput | FinancialDecisionWhereUniqueInput[]
    connect?: FinancialDecisionWhereUniqueInput | FinancialDecisionWhereUniqueInput[]
    update?: FinancialDecisionUpdateWithWhereUniqueWithoutUserInput | FinancialDecisionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FinancialDecisionUpdateManyWithWhereWithoutUserInput | FinancialDecisionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FinancialDecisionScalarWhereInput | FinancialDecisionScalarWhereInput[]
  }

  export type ScenarioConfigUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ScenarioConfigCreateWithoutUserInput, ScenarioConfigUncheckedCreateWithoutUserInput> | ScenarioConfigCreateWithoutUserInput[] | ScenarioConfigUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ScenarioConfigCreateOrConnectWithoutUserInput | ScenarioConfigCreateOrConnectWithoutUserInput[]
    upsert?: ScenarioConfigUpsertWithWhereUniqueWithoutUserInput | ScenarioConfigUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ScenarioConfigCreateManyUserInputEnvelope
    set?: ScenarioConfigWhereUniqueInput | ScenarioConfigWhereUniqueInput[]
    disconnect?: ScenarioConfigWhereUniqueInput | ScenarioConfigWhereUniqueInput[]
    delete?: ScenarioConfigWhereUniqueInput | ScenarioConfigWhereUniqueInput[]
    connect?: ScenarioConfigWhereUniqueInput | ScenarioConfigWhereUniqueInput[]
    update?: ScenarioConfigUpdateWithWhereUniqueWithoutUserInput | ScenarioConfigUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ScenarioConfigUpdateManyWithWhereWithoutUserInput | ScenarioConfigUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ScenarioConfigScalarWhereInput | ScenarioConfigScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutFinancialDataInput = {
    create?: XOR<UserCreateWithoutFinancialDataInput, UserUncheckedCreateWithoutFinancialDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutFinancialDataInput
    connect?: UserWhereUniqueInput
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutFinancialDataNestedInput = {
    create?: XOR<UserCreateWithoutFinancialDataInput, UserUncheckedCreateWithoutFinancialDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutFinancialDataInput
    upsert?: UserUpsertWithoutFinancialDataInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFinancialDataInput, UserUpdateWithoutFinancialDataInput>, UserUncheckedUpdateWithoutFinancialDataInput>
  }

  export type UserCreateNestedOneWithoutHistoricalDataInput = {
    create?: XOR<UserCreateWithoutHistoricalDataInput, UserUncheckedCreateWithoutHistoricalDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutHistoricalDataInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutHistoricalDataNestedInput = {
    create?: XOR<UserCreateWithoutHistoricalDataInput, UserUncheckedCreateWithoutHistoricalDataInput>
    connectOrCreate?: UserCreateOrConnectWithoutHistoricalDataInput
    upsert?: UserUpsertWithoutHistoricalDataInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHistoricalDataInput, UserUpdateWithoutHistoricalDataInput>, UserUncheckedUpdateWithoutHistoricalDataInput>
  }

  export type UserCreateNestedOneWithoutFinancialDecisionsInput = {
    create?: XOR<UserCreateWithoutFinancialDecisionsInput, UserUncheckedCreateWithoutFinancialDecisionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFinancialDecisionsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableFloatFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutFinancialDecisionsNestedInput = {
    create?: XOR<UserCreateWithoutFinancialDecisionsInput, UserUncheckedCreateWithoutFinancialDecisionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutFinancialDecisionsInput
    upsert?: UserUpsertWithoutFinancialDecisionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFinancialDecisionsInput, UserUpdateWithoutFinancialDecisionsInput>, UserUncheckedUpdateWithoutFinancialDecisionsInput>
  }

  export type UserCreateNestedOneWithoutScenarioConfigsInput = {
    create?: XOR<UserCreateWithoutScenarioConfigsInput, UserUncheckedCreateWithoutScenarioConfigsInput>
    connectOrCreate?: UserCreateOrConnectWithoutScenarioConfigsInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutScenarioConfigsNestedInput = {
    create?: XOR<UserCreateWithoutScenarioConfigsInput, UserUncheckedCreateWithoutScenarioConfigsInput>
    connectOrCreate?: UserCreateOrConnectWithoutScenarioConfigsInput
    upsert?: UserUpsertWithoutScenarioConfigsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutScenarioConfigsInput, UserUpdateWithoutScenarioConfigsInput>, UserUncheckedUpdateWithoutScenarioConfigsInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedFloatNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedFloatNullableFilter<$PrismaModel>
    _min?: NestedFloatNullableFilter<$PrismaModel>
    _max?: NestedFloatNullableFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FinancialDataCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    monthlySalary?: number
    freelanceIncome?: number
    rent?: number
    utilities?: number
    groceries?: number
    subscriptions?: number
    miscellaneous?: number
    totalDebt?: number
    monthlyEMI?: number
    emergencyFund?: number
    otherSavings?: number
    sipMonthly?: number
    lumpSumInvestment?: number
    overallScore?: number | null
    emergencyFundScore?: number | null
    debtRatioScore?: number | null
    investmentAllocationScore?: number | null
  }

  export type FinancialDataUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    updatedAt?: Date | string
    monthlySalary?: number
    freelanceIncome?: number
    rent?: number
    utilities?: number
    groceries?: number
    subscriptions?: number
    miscellaneous?: number
    totalDebt?: number
    monthlyEMI?: number
    emergencyFund?: number
    otherSavings?: number
    sipMonthly?: number
    lumpSumInvestment?: number
    overallScore?: number | null
    emergencyFundScore?: number | null
    debtRatioScore?: number | null
    investmentAllocationScore?: number | null
  }

  export type FinancialDataCreateOrConnectWithoutUserInput = {
    where: FinancialDataWhereUniqueInput
    create: XOR<FinancialDataCreateWithoutUserInput, FinancialDataUncheckedCreateWithoutUserInput>
  }

  export type HistoricalDataCreateWithoutUserInput = {
    id?: string
    month: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    monthlySalary?: number
    freelanceIncome?: number
    rent?: number
    utilities?: number
    groceries?: number
    subscriptions?: number
    miscellaneous?: number
    totalDebt?: number
    monthlyEMI?: number
    emergencyFund?: number
    otherSavings?: number
    sipMonthly?: number
    lumpSumInvestment?: number
  }

  export type HistoricalDataUncheckedCreateWithoutUserInput = {
    id?: string
    month: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    monthlySalary?: number
    freelanceIncome?: number
    rent?: number
    utilities?: number
    groceries?: number
    subscriptions?: number
    miscellaneous?: number
    totalDebt?: number
    monthlyEMI?: number
    emergencyFund?: number
    otherSavings?: number
    sipMonthly?: number
    lumpSumInvestment?: number
  }

  export type HistoricalDataCreateOrConnectWithoutUserInput = {
    where: HistoricalDataWhereUniqueInput
    create: XOR<HistoricalDataCreateWithoutUserInput, HistoricalDataUncheckedCreateWithoutUserInput>
  }

  export type HistoricalDataCreateManyUserInputEnvelope = {
    data: HistoricalDataCreateManyUserInput | HistoricalDataCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FinancialDecisionCreateWithoutUserInput = {
    id?: string
    title: string
    amount: number
    date: Date | string
    category: string
    alternativeOption?: string | null
    expectedReturn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialDecisionUncheckedCreateWithoutUserInput = {
    id?: string
    title: string
    amount: number
    date: Date | string
    category: string
    alternativeOption?: string | null
    expectedReturn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FinancialDecisionCreateOrConnectWithoutUserInput = {
    where: FinancialDecisionWhereUniqueInput
    create: XOR<FinancialDecisionCreateWithoutUserInput, FinancialDecisionUncheckedCreateWithoutUserInput>
  }

  export type FinancialDecisionCreateManyUserInputEnvelope = {
    data: FinancialDecisionCreateManyUserInput | FinancialDecisionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ScenarioConfigCreateWithoutUserInput = {
    id?: string
    name: string
    newRent?: number | null
    jobSwitchSalary?: number | null
    sipInvestment?: number | null
    expenseGrowthRate?: number | null
    projectionTimeframe: number
    oneTimeExpense?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScenarioConfigUncheckedCreateWithoutUserInput = {
    id?: string
    name: string
    newRent?: number | null
    jobSwitchSalary?: number | null
    sipInvestment?: number | null
    expenseGrowthRate?: number | null
    projectionTimeframe: number
    oneTimeExpense?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScenarioConfigCreateOrConnectWithoutUserInput = {
    where: ScenarioConfigWhereUniqueInput
    create: XOR<ScenarioConfigCreateWithoutUserInput, ScenarioConfigUncheckedCreateWithoutUserInput>
  }

  export type ScenarioConfigCreateManyUserInputEnvelope = {
    data: ScenarioConfigCreateManyUserInput | ScenarioConfigCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FinancialDataUpsertWithoutUserInput = {
    update: XOR<FinancialDataUpdateWithoutUserInput, FinancialDataUncheckedUpdateWithoutUserInput>
    create: XOR<FinancialDataCreateWithoutUserInput, FinancialDataUncheckedCreateWithoutUserInput>
    where?: FinancialDataWhereInput
  }

  export type FinancialDataUpdateToOneWithWhereWithoutUserInput = {
    where?: FinancialDataWhereInput
    data: XOR<FinancialDataUpdateWithoutUserInput, FinancialDataUncheckedUpdateWithoutUserInput>
  }

  export type FinancialDataUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlySalary?: FloatFieldUpdateOperationsInput | number
    freelanceIncome?: FloatFieldUpdateOperationsInput | number
    rent?: FloatFieldUpdateOperationsInput | number
    utilities?: FloatFieldUpdateOperationsInput | number
    groceries?: FloatFieldUpdateOperationsInput | number
    subscriptions?: FloatFieldUpdateOperationsInput | number
    miscellaneous?: FloatFieldUpdateOperationsInput | number
    totalDebt?: FloatFieldUpdateOperationsInput | number
    monthlyEMI?: FloatFieldUpdateOperationsInput | number
    emergencyFund?: FloatFieldUpdateOperationsInput | number
    otherSavings?: FloatFieldUpdateOperationsInput | number
    sipMonthly?: FloatFieldUpdateOperationsInput | number
    lumpSumInvestment?: FloatFieldUpdateOperationsInput | number
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    emergencyFundScore?: NullableIntFieldUpdateOperationsInput | number | null
    debtRatioScore?: NullableIntFieldUpdateOperationsInput | number | null
    investmentAllocationScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type FinancialDataUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlySalary?: FloatFieldUpdateOperationsInput | number
    freelanceIncome?: FloatFieldUpdateOperationsInput | number
    rent?: FloatFieldUpdateOperationsInput | number
    utilities?: FloatFieldUpdateOperationsInput | number
    groceries?: FloatFieldUpdateOperationsInput | number
    subscriptions?: FloatFieldUpdateOperationsInput | number
    miscellaneous?: FloatFieldUpdateOperationsInput | number
    totalDebt?: FloatFieldUpdateOperationsInput | number
    monthlyEMI?: FloatFieldUpdateOperationsInput | number
    emergencyFund?: FloatFieldUpdateOperationsInput | number
    otherSavings?: FloatFieldUpdateOperationsInput | number
    sipMonthly?: FloatFieldUpdateOperationsInput | number
    lumpSumInvestment?: FloatFieldUpdateOperationsInput | number
    overallScore?: NullableIntFieldUpdateOperationsInput | number | null
    emergencyFundScore?: NullableIntFieldUpdateOperationsInput | number | null
    debtRatioScore?: NullableIntFieldUpdateOperationsInput | number | null
    investmentAllocationScore?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type HistoricalDataUpsertWithWhereUniqueWithoutUserInput = {
    where: HistoricalDataWhereUniqueInput
    update: XOR<HistoricalDataUpdateWithoutUserInput, HistoricalDataUncheckedUpdateWithoutUserInput>
    create: XOR<HistoricalDataCreateWithoutUserInput, HistoricalDataUncheckedCreateWithoutUserInput>
  }

  export type HistoricalDataUpdateWithWhereUniqueWithoutUserInput = {
    where: HistoricalDataWhereUniqueInput
    data: XOR<HistoricalDataUpdateWithoutUserInput, HistoricalDataUncheckedUpdateWithoutUserInput>
  }

  export type HistoricalDataUpdateManyWithWhereWithoutUserInput = {
    where: HistoricalDataScalarWhereInput
    data: XOR<HistoricalDataUpdateManyMutationInput, HistoricalDataUncheckedUpdateManyWithoutUserInput>
  }

  export type HistoricalDataScalarWhereInput = {
    AND?: HistoricalDataScalarWhereInput | HistoricalDataScalarWhereInput[]
    OR?: HistoricalDataScalarWhereInput[]
    NOT?: HistoricalDataScalarWhereInput | HistoricalDataScalarWhereInput[]
    id?: StringFilter<"HistoricalData"> | string
    month?: DateTimeFilter<"HistoricalData"> | Date | string
    createdAt?: DateTimeFilter<"HistoricalData"> | Date | string
    updatedAt?: DateTimeFilter<"HistoricalData"> | Date | string
    monthlySalary?: FloatFilter<"HistoricalData"> | number
    freelanceIncome?: FloatFilter<"HistoricalData"> | number
    rent?: FloatFilter<"HistoricalData"> | number
    utilities?: FloatFilter<"HistoricalData"> | number
    groceries?: FloatFilter<"HistoricalData"> | number
    subscriptions?: FloatFilter<"HistoricalData"> | number
    miscellaneous?: FloatFilter<"HistoricalData"> | number
    totalDebt?: FloatFilter<"HistoricalData"> | number
    monthlyEMI?: FloatFilter<"HistoricalData"> | number
    emergencyFund?: FloatFilter<"HistoricalData"> | number
    otherSavings?: FloatFilter<"HistoricalData"> | number
    sipMonthly?: FloatFilter<"HistoricalData"> | number
    lumpSumInvestment?: FloatFilter<"HistoricalData"> | number
    userId?: StringFilter<"HistoricalData"> | string
  }

  export type FinancialDecisionUpsertWithWhereUniqueWithoutUserInput = {
    where: FinancialDecisionWhereUniqueInput
    update: XOR<FinancialDecisionUpdateWithoutUserInput, FinancialDecisionUncheckedUpdateWithoutUserInput>
    create: XOR<FinancialDecisionCreateWithoutUserInput, FinancialDecisionUncheckedCreateWithoutUserInput>
  }

  export type FinancialDecisionUpdateWithWhereUniqueWithoutUserInput = {
    where: FinancialDecisionWhereUniqueInput
    data: XOR<FinancialDecisionUpdateWithoutUserInput, FinancialDecisionUncheckedUpdateWithoutUserInput>
  }

  export type FinancialDecisionUpdateManyWithWhereWithoutUserInput = {
    where: FinancialDecisionScalarWhereInput
    data: XOR<FinancialDecisionUpdateManyMutationInput, FinancialDecisionUncheckedUpdateManyWithoutUserInput>
  }

  export type FinancialDecisionScalarWhereInput = {
    AND?: FinancialDecisionScalarWhereInput | FinancialDecisionScalarWhereInput[]
    OR?: FinancialDecisionScalarWhereInput[]
    NOT?: FinancialDecisionScalarWhereInput | FinancialDecisionScalarWhereInput[]
    id?: StringFilter<"FinancialDecision"> | string
    title?: StringFilter<"FinancialDecision"> | string
    amount?: FloatFilter<"FinancialDecision"> | number
    date?: DateTimeFilter<"FinancialDecision"> | Date | string
    category?: StringFilter<"FinancialDecision"> | string
    alternativeOption?: StringNullableFilter<"FinancialDecision"> | string | null
    expectedReturn?: FloatNullableFilter<"FinancialDecision"> | number | null
    createdAt?: DateTimeFilter<"FinancialDecision"> | Date | string
    updatedAt?: DateTimeFilter<"FinancialDecision"> | Date | string
    userId?: StringFilter<"FinancialDecision"> | string
  }

  export type ScenarioConfigUpsertWithWhereUniqueWithoutUserInput = {
    where: ScenarioConfigWhereUniqueInput
    update: XOR<ScenarioConfigUpdateWithoutUserInput, ScenarioConfigUncheckedUpdateWithoutUserInput>
    create: XOR<ScenarioConfigCreateWithoutUserInput, ScenarioConfigUncheckedCreateWithoutUserInput>
  }

  export type ScenarioConfigUpdateWithWhereUniqueWithoutUserInput = {
    where: ScenarioConfigWhereUniqueInput
    data: XOR<ScenarioConfigUpdateWithoutUserInput, ScenarioConfigUncheckedUpdateWithoutUserInput>
  }

  export type ScenarioConfigUpdateManyWithWhereWithoutUserInput = {
    where: ScenarioConfigScalarWhereInput
    data: XOR<ScenarioConfigUpdateManyMutationInput, ScenarioConfigUncheckedUpdateManyWithoutUserInput>
  }

  export type ScenarioConfigScalarWhereInput = {
    AND?: ScenarioConfigScalarWhereInput | ScenarioConfigScalarWhereInput[]
    OR?: ScenarioConfigScalarWhereInput[]
    NOT?: ScenarioConfigScalarWhereInput | ScenarioConfigScalarWhereInput[]
    id?: StringFilter<"ScenarioConfig"> | string
    name?: StringFilter<"ScenarioConfig"> | string
    newRent?: FloatNullableFilter<"ScenarioConfig"> | number | null
    jobSwitchSalary?: FloatNullableFilter<"ScenarioConfig"> | number | null
    sipInvestment?: FloatNullableFilter<"ScenarioConfig"> | number | null
    expenseGrowthRate?: FloatNullableFilter<"ScenarioConfig"> | number | null
    projectionTimeframe?: IntFilter<"ScenarioConfig"> | number
    oneTimeExpense?: FloatNullableFilter<"ScenarioConfig"> | number | null
    createdAt?: DateTimeFilter<"ScenarioConfig"> | Date | string
    updatedAt?: DateTimeFilter<"ScenarioConfig"> | Date | string
    userId?: StringFilter<"ScenarioConfig"> | string
  }

  export type UserCreateWithoutFinancialDataInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    historicalData?: HistoricalDataCreateNestedManyWithoutUserInput
    financialDecisions?: FinancialDecisionCreateNestedManyWithoutUserInput
    scenarioConfigs?: ScenarioConfigCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFinancialDataInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    historicalData?: HistoricalDataUncheckedCreateNestedManyWithoutUserInput
    financialDecisions?: FinancialDecisionUncheckedCreateNestedManyWithoutUserInput
    scenarioConfigs?: ScenarioConfigUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFinancialDataInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFinancialDataInput, UserUncheckedCreateWithoutFinancialDataInput>
  }

  export type UserUpsertWithoutFinancialDataInput = {
    update: XOR<UserUpdateWithoutFinancialDataInput, UserUncheckedUpdateWithoutFinancialDataInput>
    create: XOR<UserCreateWithoutFinancialDataInput, UserUncheckedCreateWithoutFinancialDataInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFinancialDataInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFinancialDataInput, UserUncheckedUpdateWithoutFinancialDataInput>
  }

  export type UserUpdateWithoutFinancialDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historicalData?: HistoricalDataUpdateManyWithoutUserNestedInput
    financialDecisions?: FinancialDecisionUpdateManyWithoutUserNestedInput
    scenarioConfigs?: ScenarioConfigUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFinancialDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    historicalData?: HistoricalDataUncheckedUpdateManyWithoutUserNestedInput
    financialDecisions?: FinancialDecisionUncheckedUpdateManyWithoutUserNestedInput
    scenarioConfigs?: ScenarioConfigUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutHistoricalDataInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    financialData?: FinancialDataCreateNestedOneWithoutUserInput
    financialDecisions?: FinancialDecisionCreateNestedManyWithoutUserInput
    scenarioConfigs?: ScenarioConfigCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHistoricalDataInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    financialData?: FinancialDataUncheckedCreateNestedOneWithoutUserInput
    financialDecisions?: FinancialDecisionUncheckedCreateNestedManyWithoutUserInput
    scenarioConfigs?: ScenarioConfigUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHistoricalDataInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHistoricalDataInput, UserUncheckedCreateWithoutHistoricalDataInput>
  }

  export type UserUpsertWithoutHistoricalDataInput = {
    update: XOR<UserUpdateWithoutHistoricalDataInput, UserUncheckedUpdateWithoutHistoricalDataInput>
    create: XOR<UserCreateWithoutHistoricalDataInput, UserUncheckedCreateWithoutHistoricalDataInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHistoricalDataInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHistoricalDataInput, UserUncheckedUpdateWithoutHistoricalDataInput>
  }

  export type UserUpdateWithoutHistoricalDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    financialData?: FinancialDataUpdateOneWithoutUserNestedInput
    financialDecisions?: FinancialDecisionUpdateManyWithoutUserNestedInput
    scenarioConfigs?: ScenarioConfigUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHistoricalDataInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    financialData?: FinancialDataUncheckedUpdateOneWithoutUserNestedInput
    financialDecisions?: FinancialDecisionUncheckedUpdateManyWithoutUserNestedInput
    scenarioConfigs?: ScenarioConfigUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutFinancialDecisionsInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    financialData?: FinancialDataCreateNestedOneWithoutUserInput
    historicalData?: HistoricalDataCreateNestedManyWithoutUserInput
    scenarioConfigs?: ScenarioConfigCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFinancialDecisionsInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    financialData?: FinancialDataUncheckedCreateNestedOneWithoutUserInput
    historicalData?: HistoricalDataUncheckedCreateNestedManyWithoutUserInput
    scenarioConfigs?: ScenarioConfigUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFinancialDecisionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFinancialDecisionsInput, UserUncheckedCreateWithoutFinancialDecisionsInput>
  }

  export type UserUpsertWithoutFinancialDecisionsInput = {
    update: XOR<UserUpdateWithoutFinancialDecisionsInput, UserUncheckedUpdateWithoutFinancialDecisionsInput>
    create: XOR<UserCreateWithoutFinancialDecisionsInput, UserUncheckedCreateWithoutFinancialDecisionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFinancialDecisionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFinancialDecisionsInput, UserUncheckedUpdateWithoutFinancialDecisionsInput>
  }

  export type UserUpdateWithoutFinancialDecisionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    financialData?: FinancialDataUpdateOneWithoutUserNestedInput
    historicalData?: HistoricalDataUpdateManyWithoutUserNestedInput
    scenarioConfigs?: ScenarioConfigUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFinancialDecisionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    financialData?: FinancialDataUncheckedUpdateOneWithoutUserNestedInput
    historicalData?: HistoricalDataUncheckedUpdateManyWithoutUserNestedInput
    scenarioConfigs?: ScenarioConfigUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutScenarioConfigsInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    financialData?: FinancialDataCreateNestedOneWithoutUserInput
    historicalData?: HistoricalDataCreateNestedManyWithoutUserInput
    financialDecisions?: FinancialDecisionCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutScenarioConfigsInput = {
    id?: string
    email: string
    name?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    financialData?: FinancialDataUncheckedCreateNestedOneWithoutUserInput
    historicalData?: HistoricalDataUncheckedCreateNestedManyWithoutUserInput
    financialDecisions?: FinancialDecisionUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutScenarioConfigsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutScenarioConfigsInput, UserUncheckedCreateWithoutScenarioConfigsInput>
  }

  export type UserUpsertWithoutScenarioConfigsInput = {
    update: XOR<UserUpdateWithoutScenarioConfigsInput, UserUncheckedUpdateWithoutScenarioConfigsInput>
    create: XOR<UserCreateWithoutScenarioConfigsInput, UserUncheckedCreateWithoutScenarioConfigsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutScenarioConfigsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutScenarioConfigsInput, UserUncheckedUpdateWithoutScenarioConfigsInput>
  }

  export type UserUpdateWithoutScenarioConfigsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    financialData?: FinancialDataUpdateOneWithoutUserNestedInput
    historicalData?: HistoricalDataUpdateManyWithoutUserNestedInput
    financialDecisions?: FinancialDecisionUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutScenarioConfigsInput = {
    id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    financialData?: FinancialDataUncheckedUpdateOneWithoutUserNestedInput
    historicalData?: HistoricalDataUncheckedUpdateManyWithoutUserNestedInput
    financialDecisions?: FinancialDecisionUncheckedUpdateManyWithoutUserNestedInput
  }

  export type HistoricalDataCreateManyUserInput = {
    id?: string
    month: Date | string
    createdAt?: Date | string
    updatedAt?: Date | string
    monthlySalary?: number
    freelanceIncome?: number
    rent?: number
    utilities?: number
    groceries?: number
    subscriptions?: number
    miscellaneous?: number
    totalDebt?: number
    monthlyEMI?: number
    emergencyFund?: number
    otherSavings?: number
    sipMonthly?: number
    lumpSumInvestment?: number
  }

  export type FinancialDecisionCreateManyUserInput = {
    id?: string
    title: string
    amount: number
    date: Date | string
    category: string
    alternativeOption?: string | null
    expectedReturn?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type ScenarioConfigCreateManyUserInput = {
    id?: string
    name: string
    newRent?: number | null
    jobSwitchSalary?: number | null
    sipInvestment?: number | null
    expenseGrowthRate?: number | null
    projectionTimeframe: number
    oneTimeExpense?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HistoricalDataUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlySalary?: FloatFieldUpdateOperationsInput | number
    freelanceIncome?: FloatFieldUpdateOperationsInput | number
    rent?: FloatFieldUpdateOperationsInput | number
    utilities?: FloatFieldUpdateOperationsInput | number
    groceries?: FloatFieldUpdateOperationsInput | number
    subscriptions?: FloatFieldUpdateOperationsInput | number
    miscellaneous?: FloatFieldUpdateOperationsInput | number
    totalDebt?: FloatFieldUpdateOperationsInput | number
    monthlyEMI?: FloatFieldUpdateOperationsInput | number
    emergencyFund?: FloatFieldUpdateOperationsInput | number
    otherSavings?: FloatFieldUpdateOperationsInput | number
    sipMonthly?: FloatFieldUpdateOperationsInput | number
    lumpSumInvestment?: FloatFieldUpdateOperationsInput | number
  }

  export type HistoricalDataUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlySalary?: FloatFieldUpdateOperationsInput | number
    freelanceIncome?: FloatFieldUpdateOperationsInput | number
    rent?: FloatFieldUpdateOperationsInput | number
    utilities?: FloatFieldUpdateOperationsInput | number
    groceries?: FloatFieldUpdateOperationsInput | number
    subscriptions?: FloatFieldUpdateOperationsInput | number
    miscellaneous?: FloatFieldUpdateOperationsInput | number
    totalDebt?: FloatFieldUpdateOperationsInput | number
    monthlyEMI?: FloatFieldUpdateOperationsInput | number
    emergencyFund?: FloatFieldUpdateOperationsInput | number
    otherSavings?: FloatFieldUpdateOperationsInput | number
    sipMonthly?: FloatFieldUpdateOperationsInput | number
    lumpSumInvestment?: FloatFieldUpdateOperationsInput | number
  }

  export type HistoricalDataUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    month?: DateTimeFieldUpdateOperationsInput | Date | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    monthlySalary?: FloatFieldUpdateOperationsInput | number
    freelanceIncome?: FloatFieldUpdateOperationsInput | number
    rent?: FloatFieldUpdateOperationsInput | number
    utilities?: FloatFieldUpdateOperationsInput | number
    groceries?: FloatFieldUpdateOperationsInput | number
    subscriptions?: FloatFieldUpdateOperationsInput | number
    miscellaneous?: FloatFieldUpdateOperationsInput | number
    totalDebt?: FloatFieldUpdateOperationsInput | number
    monthlyEMI?: FloatFieldUpdateOperationsInput | number
    emergencyFund?: FloatFieldUpdateOperationsInput | number
    otherSavings?: FloatFieldUpdateOperationsInput | number
    sipMonthly?: FloatFieldUpdateOperationsInput | number
    lumpSumInvestment?: FloatFieldUpdateOperationsInput | number
  }

  export type FinancialDecisionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    alternativeOption?: NullableStringFieldUpdateOperationsInput | string | null
    expectedReturn?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialDecisionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    alternativeOption?: NullableStringFieldUpdateOperationsInput | string | null
    expectedReturn?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FinancialDecisionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    amount?: FloatFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: StringFieldUpdateOperationsInput | string
    alternativeOption?: NullableStringFieldUpdateOperationsInput | string | null
    expectedReturn?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScenarioConfigUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    newRent?: NullableFloatFieldUpdateOperationsInput | number | null
    jobSwitchSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    sipInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    expenseGrowthRate?: NullableFloatFieldUpdateOperationsInput | number | null
    projectionTimeframe?: IntFieldUpdateOperationsInput | number
    oneTimeExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScenarioConfigUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    newRent?: NullableFloatFieldUpdateOperationsInput | number | null
    jobSwitchSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    sipInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    expenseGrowthRate?: NullableFloatFieldUpdateOperationsInput | number | null
    projectionTimeframe?: IntFieldUpdateOperationsInput | number
    oneTimeExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ScenarioConfigUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    newRent?: NullableFloatFieldUpdateOperationsInput | number | null
    jobSwitchSalary?: NullableFloatFieldUpdateOperationsInput | number | null
    sipInvestment?: NullableFloatFieldUpdateOperationsInput | number | null
    expenseGrowthRate?: NullableFloatFieldUpdateOperationsInput | number | null
    projectionTimeframe?: IntFieldUpdateOperationsInput | number
    oneTimeExpense?: NullableFloatFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}